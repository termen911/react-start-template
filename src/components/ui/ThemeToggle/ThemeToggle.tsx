import React, { useCallback } from 'react';
import { ThemeScheme, useThemeScheme } from 'src/shared/providers/ThemeProvider';
import s from './ThemeToggle.module.css';

// –ü–∞—Ç—Ç–µ—Ä–Ω: State hoisting - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface ThemeToggleProps {
  theme?: ThemeScheme;
  onThemeChange?: (theme: ThemeScheme) => void;
  size?: 'small' | 'medium' | 'large';
  variant?: 'default' | 'minimal' | 'rounded';
  showLabel?: boolean;
  disabled?: boolean;
  className?: string;
  style?: React.CSSProperties;
}

// –ü–∞—Ç—Ç–µ—Ä–Ω: merge destructured props with other values
const DEFAULT_PROPS = {
  size: 'medium' as const,
  variant: 'default' as const,
  showLabel: false,
  disabled: false,
};

const ThemeToggleBase: React.FC<ThemeToggleProps> = (props) => {
  // –ü–∞—Ç—Ç–µ—Ä–Ω: destructuring props + merge destructured props with other values
  const {
    theme: controlledTheme,
    onThemeChange,
    size,
    variant,
    showLabel,
    disabled,
    className = '',
    style = {},
    ...restProps
  } = { ...DEFAULT_PROPS, ...props };

  // –ü–∞—Ç—Ç–µ—Ä–Ω: State hoisting - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ
  const { themeScheme: internalTheme, toggleThemeScheme } = useThemeScheme();

  // –ü–∞—Ç—Ç–µ—Ä–Ω: Controlled input - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω controlledTheme, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const currentTheme = controlledTheme !== undefined ? controlledTheme : internalTheme;

  // –ü–∞—Ç—Ç–µ—Ä–Ω: Event switch - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
  const handleToggle = useCallback(
    (action: 'toggle' | 'set', newTheme?: ThemeScheme) => {
      if (disabled) return;

      let targetTheme: ThemeScheme;

      switch (action) {
        case 'toggle':
          targetTheme = currentTheme === ThemeScheme.light ? ThemeScheme.dark : ThemeScheme.light;
          break;
        case 'set':
          targetTheme = newTheme || ThemeScheme.light;
          break;
        default:
          return;
      }

      if (onThemeChange) {
        onThemeChange(targetTheme);
      } else {
        toggleThemeScheme();
      }
    },
    [currentTheme, disabled, onThemeChange, toggleThemeScheme]
  );

  const handleClick = useCallback(() => {
    handleToggle('toggle');
  }, [handleToggle]);

  const handleKeyDown = useCallback(
    (e: React.KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        handleToggle('toggle');
      }
    },
    [handleToggle]
  );

  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
  const getIcon = (theme: ThemeScheme) => {
    return theme === ThemeScheme.light ? 'üåô' : '‚òÄÔ∏è';
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
  const getLabel = (theme: ThemeScheme) => {
    return theme === ThemeScheme.light ? '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
  };

  const sizeClass = s[size] || s.medium;
  const variantClass = s[variant] || s.default;

  return (
    <button
      {...restProps} // –ü–∞—Ç—Ç–µ—Ä–Ω: JSX spread attributes
      className={`${s.themeToggle} ${sizeClass} ${variantClass} ${className}`}
      style={style}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      disabled={disabled}
      aria-label={getLabel(currentTheme)}
      title={getLabel(currentTheme)}
    >
      <span className={s.icon}>{getIcon(currentTheme)}</span>
      {/* –ü–∞—Ç—Ç–µ—Ä–Ω: Conditional rendering */}
      {showLabel && <span className={s.label}>{getLabel(currentTheme)}</span>}
    </button>
  );
};

// –ü–∞—Ç—Ç–µ—Ä–Ω: Proxy component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const ThemeToggle: React.FC<Omit<ThemeToggleProps, 'theme' | 'onThemeChange'>> = (props) => {
  return <ThemeToggleBase {...props} />;
};

// –ü–∞—Ç—Ç–µ—Ä–Ω: Controlled input - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—É—é –≤–µ—Ä—Å–∏—é
export const ControlledThemeToggle: React.FC<ThemeToggleProps> = ThemeToggleBase;
