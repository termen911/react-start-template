{"version":3,"file":"js/909.js","mappings":"oRAQQA,EAAUC,EAAAA,EAAVD,MAMKE,EAA0D,SAAHC,GAA0B,IAApBC,EAAaD,EAAbC,cAChEC,GAAMC,EAAAA,EAAAA,KAAND,EACAE,EAAUC,EAAAA,EAAMC,WAAhBF,MAEFG,EAAcC,EAAAA,GAAQC,mBAAmBR,GAE/C,IAAKM,EAAa,OAAO,KAEzB,IAAMG,ECbgC,SACtCC,EACAP,EACAF,GAEA,OAAQS,GACN,KAAKC,EAAAA,EAAgBC,OACnB,MAAO,CACLC,MAAO,UACPC,KAAMb,EAAE,2BACRc,QAASZ,EAAMa,iBACfC,YAAad,EAAMe,aAEvB,KAAKP,EAAAA,EAAgBQ,QACnB,MAAO,CACLN,MAAO,QACPC,KAAMb,EAAE,4BACRc,QAASZ,EAAMa,iBACfC,YAAad,EAAMe,aAEvB,KAAKP,EAAAA,EAAgBS,SACnB,MAAO,CACLP,MAAO,aACPC,KAAMb,EAAE,6BACRc,QAASZ,EAAMa,iBACfC,YAAad,EAAMe,aAEvB,QACE,MAAO,CACLL,MAAO,UACPC,KAAMb,EAAE,4BACRc,QAASZ,EAAMa,iBACfC,YAAad,EAAMe,aAG3B,CDtBqBG,CAAyBf,EAAYgB,KAAMnB,EAAOF,GAC/DsB,EAAgBC,KAAKC,IAAInB,EAAYoB,QAAQC,eAAe,SAE5DC,EAAWtB,EAAYgB,OAASX,EAAAA,EAAgBC,OAChDiB,EAAYvB,EAAYgB,OAASX,EAAAA,EAAgBQ,QAEvD,OACEW,EAAAA,cAACC,EAAAA,EAAI,CACHC,MAAO,CACLC,WAAYxB,EAAWM,QACvBE,YAAaR,EAAWQ,cAG1Ba,EAAAA,cAACI,EAAAA,EAAG,CAACC,MAAM,SAASC,OAAQ,IAC1BN,EAAAA,cAACO,EAAAA,EAAG,KACFP,EAAAA,cAACQ,EAAAA,EAAM,CACLC,KAAM,GACNP,MAAO,CACLQ,gBAAiBlC,EAAYmC,cAAgB,KAC7CC,OAAQ,aAAFC,OAAerC,EAAYmC,eACjCG,SAAU,SAGXtC,EAAYuC,eAGjBf,EAAAA,cAACO,EAAAA,EAAG,CAACS,KAAK,KACRhB,EAAAA,cAACiB,EAAAA,EAAK,CAACC,UAAU,WAAWT,KAAK,QAAQP,MAAO,CAAEiB,MAAO,SACvDnB,EAAAA,cAAA,WACEA,EAAAA,cAAClC,EAAK,CAACsD,MAAO,EAAGlB,MAAO,CAAEmB,OAAQ,EAAGC,aAAc,QAChD9C,EAAY+C,OAEfvB,EAAAA,cAACwB,EAAAA,EAAG,CAACzC,MAAOJ,EAAWI,MAAOmB,MAAO,CAAEY,SAAU,OAAQW,QAAS,WAAYC,aAAc,SAC1F1B,EAAAA,cAAC2B,EAAAA,EAAW,MAAG,IAAEhD,EAAWK,MAE9BgB,EAAAA,cAACwB,EAAAA,EAAG,CACFzC,MAAOP,EAAYmC,cACnBT,MAAO,CACLY,SAAU,OACVW,QAAS,WACTC,aAAc,OACdE,WAAY,QAGbpD,EAAYqD,kBAOvB7B,EAAAA,cAACI,EAAAA,EAAG,CAACF,MAAO,CAAE4B,UAAW,SACvB9B,EAAAA,cAACO,EAAAA,EAAG,CAACwB,KAAM,IACT/B,EAAAA,cAACgC,EAAAA,EAAS,CACRT,MAAOpD,EAAE,sBACT8D,MAAOxC,EACPyC,OAAO,IACPC,OAAQrC,EAAW,IAAMC,EAAY,IAAM,GAC3CqC,WAAY,CACVtB,SAAU,OACVuB,WAAY,OACZtD,MAAOe,EAAW,UAAYC,EAAY,UAAY,eAOpE,EErFQuC,EAAcvE,EAAAA,EAAduE,UAMKC,EAAwE,SAAHtE,GAA0B,IAApBC,EAAaD,EAAbC,cAC9EC,GAAMC,EAAAA,EAAAA,KAAND,EAEFK,EAAcC,EAAAA,GAAQC,mBAAmBR,GAE/C,OAAKM,GAAgBA,EAAYgE,YAG/BxC,EAAAA,cAACC,EAAAA,EAAI,CAACsB,MAAOpD,EAAE,2BAA4B+B,MAAO,CAAE4B,UAAW,SAC7D9B,EAAAA,cAACsC,EAAS,CAACpC,MAAO,CAAEY,SAAU,OAAQ2B,WAAY,MAAOpB,OAAQ,IAAM7C,EAAYgE,cAJlC,IAOvD,ECdaE,EAA0D,SAAHzE,GAA0B,IAApBC,EAAaD,EAAbC,cAChEC,GAAMC,EAAAA,EAAAA,KAAND,EAEFK,EAAcC,EAAAA,GAAQC,mBAAmBR,GAE/C,OAAKM,GAAgBA,EAAYmE,MAAoC,IAA5BnE,EAAYmE,KAAKC,OAGxD5C,EAAAA,cAACC,EAAAA,EAAI,CAACsB,MAAOpD,EAAE,oBAAqB+B,MAAO,CAAE4B,UAAW,SACtD9B,EAAAA,cAACiB,EAAAA,EAAK,CAAC4B,MAAI,GACRrE,EAAYmE,KAAKG,KAAI,SAACC,EAAaC,GAAa,OAC/ChD,EAAAA,cAACwB,EAAAA,EAAG,CAACyB,IAAKD,EAAOjE,MAAM,QAAO,IAC1BgE,EACE,MARiE,IAajF,E,oBCrBaG,EAAiB,SAACC,GAAmB,IAAEC,EAAMC,UAAAT,OAAA,QAAAU,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAI,OAC/D,IAAIE,KAAKJ,GAAMK,mBAA8B,OAAXJ,EAAkB,QAAU,QAAS,CACrEK,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,WACR,ECNIC,EAAS/F,EAAAA,EAAT+F,KAMKC,EAAkE,SAAH9F,GAA0B,IAApBC,EAAaD,EAAbC,cAChF8F,GAA2B5F,EAAAA,EAAAA,KAAnBD,EAAC6F,EAAD7F,EAAG8F,EAAWD,EAAXC,YAELzF,EAAcC,EAAAA,GAAQC,mBAAmBR,GAE/C,OAAKM,EAGHwB,EAAAA,cAACC,EAAAA,EAAI,CAACsB,MAAOpD,EAAE,wBACb6B,EAAAA,cAACkE,EAAAA,EAAY,CAACC,OAAQ,EAAG1D,KAAK,SAC5BT,EAAAA,cAACkE,EAAAA,EAAaE,KAAI,CAACC,MAAM,eACvBrE,EAAAA,cAAC8D,EAAI,CAACQ,MAAI,EAACC,UAAQ,GAChB/F,EAAYgG,KAGjBxE,EAAAA,cAACkE,EAAAA,EAAaE,KAAI,CAChBC,MACErE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACyE,EAAAA,EAAgB,MAAG,IAAEtG,EAAE,iCAI5B6B,EAAAA,cAAC8D,EAAI,CAACY,QAAM,GAAExB,EAAe1E,EAAY2E,KAAMc,KAEjDjE,EAAAA,cAACkE,EAAAA,EAAaE,KAAI,CAACC,MAAOlG,EAAE,0BAC1B6B,EAAAA,cAAC8D,EAAI,CAACtE,KAAK,aAAa0D,EAAe1E,EAAYmG,UAAWV,KAEhEjE,EAAAA,cAACkE,EAAAA,EAAaE,KAAI,CAACC,MAAOlG,EAAE,0BAC1B6B,EAAAA,cAAC8D,EAAI,CAACtE,KAAK,aAAa0D,EAAe1E,EAAYoG,UAAWX,OAvB7C,IA4B3B,E,UChCaY,EAAkE,SAAH5G,GAA0B,IAApBC,EAAaD,EAAbC,cACxEC,GAAMC,EAAAA,EAAAA,KAAND,EACR2G,GACEC,EAAAA,EAAAA,MADMC,EAAWF,EAAXE,YAAaC,EAASH,EAATG,UAAWC,EAAOJ,EAAPI,QAASC,EAAoBL,EAApBK,qBAAsBC,EAAaN,EAAbM,cAAeC,EAAUP,EAAVO,WAAYC,EAAYR,EAAZQ,aAO1F,OACEtF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAI,CAACsB,MAAOpD,EAAE,uBAAwB+B,MAAO,CAAE4B,UAAW,SACzD9B,EAAAA,cAACiB,EAAAA,EAAK,CAACC,UAAU,WAAWhB,MAAO,CAAEiB,MAAO,SAC1CnB,EAAAA,cAACuF,EAAAA,GAAqB,CAACrH,cAAeA,EAAesH,OAAK,EAACC,QAR3C,SAACjB,GACvBY,EAAcZ,EAChB,IAOQxE,EAAAA,cAAC0F,EAAAA,GAAuB,CAACxH,cAAeA,EAAesH,OAAK,MAIhExF,EAAAA,cAAC2F,EAAAA,GAAgB,CACfC,KAAMZ,EACNa,QAASR,EACTS,SAAUR,EACVS,KAAMd,EACN/G,cAAeiH,QAAwB7B,EACvC4B,QAASA,IAIjB,EC9Bac,EAAsD,SAAH/H,GAA0B,IAApBC,EAAaD,EAAbC,cACpE,OACE8B,EAAAA,cAACI,EAAAA,EAAG,CAACE,OAAQ,CAAC,GAAI,KAChBN,EAAAA,cAACO,EAAAA,EAAG,CAAC0F,GAAI,GAAIC,GAAI,IACflG,EAAAA,cAAChC,EAAmB,CAACE,cAAeA,IACpC8B,EAAAA,cAACuC,EAA0B,CAACrE,cAAeA,IAC3C8B,EAAAA,cAAC0C,EAAmB,CAACxE,cAAeA,KAGtC8B,EAAAA,cAACO,EAAAA,EAAG,CAAC0F,GAAI,GAAIC,GAAI,GACflG,EAAAA,cAAC+D,EAAuB,CAAC7F,cAAeA,IACxC8B,EAAAA,cAAC6E,EAAuB,CAAC3G,cAAeA,KAIhD,E,wCCjBaiI,EAA0D,SAAHlI,GAAmB,IAAbmI,EAAMnI,EAANmI,OAChEjI,GAAMC,EAAAA,EAAAA,KAAND,EACR,OACE6B,EAAAA,cAACqG,EAAAA,EAAU,KACTrG,EAAAA,cAACsG,EAAAA,GAAM,CACLC,OAAO,MACPhF,MAAM,MACNiF,SAAUrI,EAAE,iCACZsI,MACEzG,EAAAA,cAAC0G,EAAAA,GAAM,CAAClH,KAAK,UAAUmH,KAAM3G,EAAAA,cAAC4G,EAAAA,EAAiB,MAAKnB,QAASW,GAC1DjI,EAAE,6BAMf,ECLmCJ,EAAAA,EAA3BD,MAA2BC,EAAAA,EAApB+F,KAAoB/F,EAAAA,EAAduE,UCSrB,QAvB8B,WAC5B,IAAQkC,GAAOqC,EAAAA,EAAAA,MAAPrC,GACFsC,GAAWC,EAAAA,EAAAA,MACT5I,GAAMC,EAAAA,EAAAA,KAAND,EAER,OAAKqG,EAKHxE,EAAAA,cAACqG,EAAAA,GAAU,KACTrG,EAAAA,cAAA,OAAKE,MAAO,CAAE8G,SAAU,SAAU3F,OAAQ,WACxCrB,EAAAA,cAACiH,EAAAA,GAAwB,CACvB1F,MAAOpD,EAAE,uBACTiI,OAAQ,kBAAMU,EAAS,gBAAgB,EACvCI,YAAY,2BAEdlH,EAAAA,cAACgG,EAAiB,CAAC9H,cAAesG,MAX/BxE,EAAAA,cAACmG,EAAmB,CAACC,OAAQ,kBAAMU,EAAS,gBAAgB,GAevE,C","sources":["webpack:///./widgets/transactionDetail/ui/TransactionMainCard/TransactionMainCard.tsx","webpack:///./pages/transactions/ui/utils/transactionConfig.ts","webpack:///./widgets/transactionDetail/ui/TransactionDescriptionCard/TransactionDescriptionCard.tsx","webpack:///./widgets/transactionDetail/ui/TransactionTagsCard/TransactionTagsCard.tsx","webpack:///./shared/lib/utils/date/formatDate.ts","webpack:///./widgets/transactionDetail/ui/TransactionDetailsPanel/TransactionDetailsPanel.tsx","webpack:///./widgets/transactionDetail/ui/TransactionActionsPanel/TransactionActionsPanel.tsx","webpack:///./widgets/transactionDetail/ui/TransactionDetail.tsx","webpack:///./pages/transactions/ui/components/TransactionNotFound.tsx","webpack:///./pages/transactions/ui/components/TransactionRenderFunctions.tsx","webpack:///./pages/transactions/ui/TransactionDetailPage.tsx"],"sourcesContent":["import { TagOutlined } from '@ant-design/icons';\nimport { Avatar, Card, Col, Row, Space, Statistic, Tag, theme, Typography } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { getTransactionTypeConfig } from 'src/pages/transactions/ui/utils/transactionConfig';\nimport { MockAPI } from 'src/shared/api/mock';\nimport { TransactionType } from 'src/shared/api/mock/types';\n\nconst { Title } = Typography;\n\ninterface TransactionMainCardProps {\n  transactionId: string;\n}\n\nexport const TransactionMainCard: React.FC<TransactionMainCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n  const { token } = theme.useToken();\n\n  const transaction = MockAPI.getTransactionById(transactionId);\n\n  if (!transaction) return null;\n\n  const typeConfig = getTransactionTypeConfig(transaction.type, token, t);\n  const displayAmount = Math.abs(transaction.amount).toLocaleString('ru-RU');\n\n  const isIncome = transaction.type === TransactionType.INCOME;\n  const isExpense = transaction.type === TransactionType.EXPENSE;\n\n  return (\n    <Card\n      style={{\n        background: typeConfig.bgColor,\n        borderColor: typeConfig.borderColor,\n      }}\n    >\n      <Row align=\"middle\" gutter={24}>\n        <Col>\n          <Avatar\n            size={80}\n            style={{\n              backgroundColor: transaction.categoryColor + '20',\n              border: `3px solid ${transaction.categoryColor}`,\n              fontSize: '32px',\n            }}\n          >\n            {transaction.categoryIcon}\n          </Avatar>\n        </Col>\n        <Col flex=\"1\">\n          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n            <div>\n              <Title level={3} style={{ margin: 0, marginBottom: '8px' }}>\n                {transaction.title}\n              </Title>\n              <Tag color={typeConfig.color} style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px' }}>\n                <TagOutlined /> {typeConfig.text}\n              </Tag>\n              <Tag\n                color={transaction.categoryColor}\n                style={{\n                  fontSize: '14px',\n                  padding: '4px 12px',\n                  borderRadius: '20px',\n                  marginLeft: '8px',\n                }}\n              >\n                {transaction.categoryName}\n              </Tag>\n            </div>\n          </Space>\n        </Col>\n      </Row>\n\n      <Row style={{ marginTop: '24px' }}>\n        <Col span={24}>\n          <Statistic\n            title={t('transaction.amount')}\n            value={displayAmount}\n            suffix=\"₽\"\n            prefix={isIncome ? '+' : isExpense ? '−' : ''}\n            valueStyle={{\n              fontSize: '32px',\n              fontWeight: 'bold',\n              color: isIncome ? '#52c41a' : isExpense ? '#f5222d' : '#1677ff',\n            }}\n          />\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n","import { TransactionType } from 'src/shared/api/mock/types';\n\nexport interface TransactionTypeConfig {\n  color: string;\n  text: string;\n  bgColor: string;\n  borderColor: string;\n}\n\nexport const getTransactionTypeConfig = (\n  transactionType: TransactionType,\n  token: any,\n  t: (key: string) => string\n): TransactionTypeConfig => {\n  switch (transactionType) {\n    case TransactionType.INCOME:\n      return {\n        color: 'success',\n        text: t('transaction.card.income'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    case TransactionType.EXPENSE:\n      return {\n        color: 'error',\n        text: t('transaction.card.expense'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    case TransactionType.TRANSFER:\n      return {\n        color: 'processing',\n        text: t('transaction.card.transfer'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    default:\n      return {\n        color: 'default',\n        text: t('transaction.card.unknown'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n  }\n};\n","import { Card, Typography } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MockAPI } from 'src/shared/api/mock';\n\nconst { Paragraph } = Typography;\n\ninterface TransactionDescriptionCardProps {\n  transactionId: string;\n}\n\nexport const TransactionDescriptionCard: React.FC<TransactionDescriptionCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n\n  const transaction = MockAPI.getTransactionById(transactionId);\n\n  if (!transaction || !transaction.description) return null;\n\n  return (\n    <Card title={t('transaction.description')} style={{ marginTop: '24px' }}>\n      <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', margin: 0 }}>{transaction.description}</Paragraph>\n    </Card>\n  );\n};\n","import { Card, Space, Tag } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MockAPI } from 'src/shared/api/mock';\n\ninterface TransactionTagsCardProps {\n  transactionId: string;\n}\n\nexport const TransactionTagsCard: React.FC<TransactionTagsCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n\n  const transaction = MockAPI.getTransactionById(transactionId);\n\n  if (!transaction || !transaction.tags || transaction.tags.length === 0) return null;\n\n  return (\n    <Card title={t('transaction.tags')} style={{ marginTop: '24px' }}>\n      <Space wrap>\n        {transaction.tags.map((tag: string, index: number) => (\n          <Tag key={index} color=\"blue\">\n            #{tag}\n          </Tag>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n","export type DateFormatOptions = {\n  includeTime?: boolean;\n  includeWeekday?: boolean;\n  short?: boolean;\n};\n\nexport const formatDateFull = (date: string | Date, locale = 'ru'): string =>\n  new Date(date).toLocaleDateString(locale === 'ru' ? 'ru-RU' : 'en-US', {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n","import { CalendarOutlined } from '@ant-design/icons';\nimport { Card, Descriptions, Typography } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MockAPI } from 'src/shared/api/mock';\nimport { formatDateFull } from 'src/shared/lib/utils/date';\n\nconst { Text } = Typography;\n\ninterface TransactionDetailsPanelProps {\n  transactionId: string;\n}\n\nexport const TransactionDetailsPanel: React.FC<TransactionDetailsPanelProps> = ({ transactionId }) => {\n  const { t, currentLang } = useAppTranslation();\n\n  const transaction = MockAPI.getTransactionById(transactionId);\n\n  if (!transaction) return null;\n\n  return (\n    <Card title={t('transaction.details')}>\n      <Descriptions column={1} size=\"small\">\n        <Descriptions.Item label=\"ID операции\">\n          <Text code copyable>\n            {transaction.id}\n          </Text>\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={\n            <>\n              <CalendarOutlined /> {t('transaction.dateOfOperation')}\n            </>\n          }\n        >\n          <Text strong>{formatDateFull(transaction.date, currentLang)}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={t('transaction.createdAt')}>\n          <Text type=\"secondary\">{formatDateFull(transaction.createdAt, currentLang)}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={t('transaction.updatedAt')}>\n          <Text type=\"secondary\">{formatDateFull(transaction.updatedAt, currentLang)}</Text>\n        </Descriptions.Item>\n      </Descriptions>\n    </Card>\n  );\n};\n","import { Card, Space } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport {\n  DeleteTransactionButton,\n  EditTransactionButton,\n  TransactionModal,\n  useTransactionModal,\n} from 'src/features/transaction';\n\ninterface TransactionActionsPanelProps {\n  transactionId: string;\n}\n\nexport const TransactionActionsPanel: React.FC<TransactionActionsPanelProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n  const { isModalOpen, modalMode, loading, editingTransactionId, openEditModal, closeModal, handleSubmit } =\n    useTransactionModal();\n\n  const handleEditClick = (id: string) => {\n    openEditModal(id);\n  };\n\n  return (\n    <>\n      <Card title={t('transaction.actions')} style={{ marginTop: '24px' }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <EditTransactionButton transactionId={transactionId} block onClick={handleEditClick} />\n          <DeleteTransactionButton transactionId={transactionId} block />\n        </Space>\n      </Card>\n\n      <TransactionModal\n        open={isModalOpen}\n        onClose={closeModal}\n        onSubmit={handleSubmit}\n        mode={modalMode}\n        transactionId={editingTransactionId || undefined}\n        loading={loading}\n      />\n    </>\n  );\n};\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport { TransactionMainCard } from './TransactionMainCard';\nimport { TransactionDescriptionCard } from './TransactionDescriptionCard';\nimport { TransactionTagsCard } from './TransactionTagsCard';\nimport { TransactionDetailsPanel } from './TransactionDetailsPanel';\nimport { TransactionActionsPanel } from './TransactionActionsPanel';\n\ninterface TransactionDetailProps {\n  transactionId: string;\n}\n\nexport const TransactionDetail: React.FC<TransactionDetailProps> = ({ transactionId }) => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col xs={24} lg={16}>\n        <TransactionMainCard transactionId={transactionId} />\n        <TransactionDescriptionCard transactionId={transactionId} />\n        <TransactionTagsCard transactionId={transactionId} />\n      </Col>\n\n      <Col xs={24} lg={8}>\n        <TransactionDetailsPanel transactionId={transactionId} />\n        <TransactionActionsPanel transactionId={transactionId} />\n      </Col>\n    </Row>\n  );\n};\n","import { ArrowLeftOutlined } from '@ant-design/icons';\nimport { Button, Result } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MainLayout } from 'src/shared/ui/mainLayout';\n\ninterface TransactionNotFoundProps {\n  onBack: () => void;\n}\n\nexport const TransactionNotFound: React.FC<TransactionNotFoundProps> = ({ onBack }) => {\n  const { t } = useAppTranslation();\n  return (\n    <MainLayout>\n      <Result\n        status=\"404\"\n        title=\"404\"\n        subTitle={t('transaction.messages.notFound')}\n        extra={\n          <Button type=\"primary\" icon={<ArrowLeftOutlined />} onClick={onBack}>\n            {t('transaction.backToList')}\n          </Button>\n        }\n      />\n    </MainLayout>\n  );\n};\n","import { ArrowLeftOutlined, CalendarOutlined, EditOutlined, TagOutlined } from '@ant-design/icons';\nimport {\n  Avatar,\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  message,\n  Popconfirm,\n  Row,\n  Space,\n  Statistic,\n  Tag,\n  Typography,\n} from 'antd';\nimport React from 'react';\nimport { formatDateFull } from 'src/shared/lib/utils/date';\n\nimport { Transaction } from 'src/shared/api/mock';\nimport { TransactionTypeConfig } from '../utils/transactionConfig';\n\nconst { Title, Text, Paragraph } = Typography;\n\ninterface RenderProps {\n  transaction: Transaction;\n  typeConfig: TransactionTypeConfig;\n  displayAmount: string;\n  isIncome: boolean;\n  isExpense: boolean;\n  t: (key: string) => string;\n  currentLang: string;\n  navigate: (path: string) => void;\n}\n\nexport const renderPageHeader = ({ t, navigate }: Pick<RenderProps, 't' | 'navigate'>) => (\n  <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '24px' }}>\n    <Col>\n      <Button icon={<ArrowLeftOutlined />} onClick={() => navigate('/transactions')} style={{ marginRight: '16px' }}>\n        {t('transaction.backToList')}\n      </Button>\n      <Title level={2} style={{ margin: 0, display: 'inline' }}>\n        {t('transaction.details')}\n      </Title>\n    </Col>\n  </Row>\n);\n\nexport const renderMainCard = ({\n  transaction,\n  typeConfig,\n  displayAmount,\n  isIncome,\n  isExpense,\n  t,\n}: Pick<RenderProps, 'transaction' | 'typeConfig' | 'displayAmount' | 'isIncome' | 'isExpense' | 't'>) => (\n  <Card\n    style={{\n      background: typeConfig.bgColor,\n      borderColor: typeConfig.borderColor,\n    }}\n  >\n    <Row align=\"middle\" gutter={24}>\n      <Col>\n        <Avatar\n          size={80}\n          style={{\n            backgroundColor: transaction.categoryColor + '20',\n            border: `3px solid ${transaction.categoryColor}`,\n            fontSize: '32px',\n          }}\n        >\n          {transaction.categoryIcon}\n        </Avatar>\n      </Col>\n      <Col flex=\"1\">\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <div>\n            <Title level={3} style={{ margin: 0, marginBottom: '8px' }}>\n              {transaction.title}\n            </Title>\n            <Tag color={typeConfig.color} style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px' }}>\n              <TagOutlined /> {typeConfig.text}\n            </Tag>\n            <Tag\n              color={transaction.categoryColor}\n              style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px', marginLeft: '8px' }}\n            >\n              {transaction.categoryName}\n            </Tag>\n          </div>\n        </Space>\n      </Col>\n    </Row>\n\n    <Row style={{ marginTop: '24px' }}>\n      <Col span={24}>\n        <Statistic\n          title={t('transaction.amount')}\n          value={displayAmount}\n          suffix=\"₽\"\n          prefix={isIncome ? '+' : isExpense ? '−' : ''}\n          valueStyle={{\n            fontSize: '32px',\n            fontWeight: 'bold',\n            color: isIncome ? '#52c41a' : isExpense ? '#f5222d' : '#1677ff',\n          }}\n        />\n      </Col>\n    </Row>\n  </Card>\n);\n\nexport const renderDescriptionCard = ({ transaction, t }: Pick<RenderProps, 'transaction' | 't'>) => (\n  <Card title={t('transaction.description')} style={{ marginTop: '24px' }}>\n    <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', margin: 0 }}>{transaction.description}</Paragraph>\n  </Card>\n);\n\nexport const renderTagsCard = ({ transaction, t }: Pick<RenderProps, 'transaction' | 't'>) => {\n  if (!transaction.tags?.length) return null;\n\n  return (\n    <Card title={t('transaction.tags')} style={{ marginTop: '24px' }}>\n      <Space wrap>\n        {transaction.tags.map((tag: string, index: number) => (\n          <Tag key={index} color=\"blue\">\n            #{tag}\n          </Tag>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n\nexport const renderDetailsPanel = ({\n  transaction,\n  t,\n  currentLang,\n}: Pick<RenderProps, 'transaction' | 't' | 'currentLang'>) => (\n  <Card title={t('transaction.details')}>\n    <Descriptions column={1} size=\"small\">\n      <Descriptions.Item label=\"ID операции\">\n        <Text code copyable>\n          {transaction.id}\n        </Text>\n      </Descriptions.Item>\n      <Descriptions.Item\n        label={\n          <>\n            <CalendarOutlined /> {t('transaction.dateOfOperation')}\n          </>\n        }\n      >\n        <Text strong>{formatDateFull(transaction.date, currentLang)}</Text>\n      </Descriptions.Item>\n      <Descriptions.Item label={t('transaction.createdAt')}>\n        <Text type=\"secondary\">{formatDateFull(transaction.createdAt, currentLang)}</Text>\n      </Descriptions.Item>\n      <Descriptions.Item label={t('transaction.updatedAt')}>\n        <Text type=\"secondary\">{formatDateFull(transaction.updatedAt, currentLang)}</Text>\n      </Descriptions.Item>\n    </Descriptions>\n  </Card>\n);\n\nexport const renderActionsPanel = ({ t }: Pick<RenderProps, 't'>) => (\n  <Card title={t('transaction.actions')} style={{ marginTop: '24px' }}>\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Button type=\"primary\" block icon={<EditOutlined />}>\n        {t('transaction.edit')}\n      </Button>\n      <Popconfirm\n        title={t('transaction.delete')}\n        okButtonProps={{ danger: true }}\n        onConfirm={() => message.success(t('transaction.messages.success'))}\n      >\n        <Button danger block>\n          {t('transaction.delete')}\n        </Button>\n      </Popconfirm>\n    </Space>\n  </Card>\n);\n","import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MainLayout, MainTitleWithTranslation } from 'src/shared/ui';\nimport { TransactionDetail } from 'src/widgets/transactionDetail';\nimport { TransactionNotFound } from './components';\n\nconst TransactionDetailPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { t } = useAppTranslation();\n\n  if (!id) {\n    return <TransactionNotFound onBack={() => navigate('/transactions')} />;\n  }\n\n  return (\n    <MainLayout>\n      <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\n        <MainTitleWithTranslation\n          title={t('transaction.details')}\n          onBack={() => navigate('/transactions')}\n          backTextKey=\"transaction.backToList\"\n        />\n        <TransactionDetail transactionId={id} />\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default TransactionDetailPage;\n"],"names":["Title","Typography","TransactionMainCard","_ref","transactionId","t","useAppTranslation","token","theme","useToken","transaction","MockAPI","getTransactionById","typeConfig","transactionType","TransactionType","INCOME","color","text","bgColor","colorBgContainer","borderColor","colorBorder","EXPENSE","TRANSFER","getTransactionTypeConfig","type","displayAmount","Math","abs","amount","toLocaleString","isIncome","isExpense","React","Card","style","background","Row","align","gutter","Col","Avatar","size","backgroundColor","categoryColor","border","concat","fontSize","categoryIcon","flex","Space","direction","width","level","margin","marginBottom","title","Tag","padding","borderRadius","TagOutlined","marginLeft","categoryName","marginTop","span","Statistic","value","suffix","prefix","valueStyle","fontWeight","Paragraph","TransactionDescriptionCard","description","lineHeight","TransactionTagsCard","tags","length","wrap","map","tag","index","key","formatDateFull","date","locale","arguments","undefined","Date","toLocaleDateString","day","month","year","hour","minute","Text","TransactionDetailsPanel","_useAppTranslation","currentLang","Descriptions","column","Item","label","code","copyable","id","CalendarOutlined","strong","createdAt","updatedAt","TransactionActionsPanel","_useTransactionModal","useTransactionModal","isModalOpen","modalMode","loading","editingTransactionId","openEditModal","closeModal","handleSubmit","EditTransactionButton","block","onClick","DeleteTransactionButton","TransactionModal","open","onClose","onSubmit","mode","TransactionDetail","xs","lg","TransactionNotFound","onBack","MainLayout","Result","status","subTitle","extra","Button","icon","ArrowLeftOutlined","useParams","navigate","useNavigate","maxWidth","MainTitleWithTranslation","backTextKey"],"sourceRoot":""}