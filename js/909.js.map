{"version":3,"file":"js/909.js","mappings":"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","sources":["webpack:///./widgets/transactionDetail/ui/TransactionActionsPanel/TransactionActionsPanel.tsx","webpack:///./widgets/transactionDetail/ui/TransactionDescriptionCard/TransactionDescriptionCard.tsx","webpack:///./shared/lib/utils/date/formatDate.ts","webpack:///./widgets/transactionDetail/ui/TransactionDetailsPanel/TransactionDetailsPanel.tsx","webpack:///./widgets/transactionDetail/ui/TransactionMainCard/TransactionMainCard.tsx","webpack:///./pages/transactions/ui/utils/transactionConfig.ts","webpack:///./widgets/transactionDetail/ui/TransactionTagsCard/TransactionTagsCard.tsx","webpack:///./widgets/transactionDetail/ui/TransactionDetail.tsx","webpack:///./pages/transactions/ui/components/TransactionNotFound.tsx","webpack:///./pages/transactions/ui/components/TransactionRenderFunctions.tsx","webpack:///./pages/transactions/ui/TransactionDetailPage.tsx"],"sourcesContent":["import { Card, Space } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport {\n  DeleteTransactionButton,\n  EditTransactionButton,\n  TransactionModal,\n  useTransactionModal,\n} from 'src/features/transaction';\n\ninterface TransactionActionsPanelProps {\n  transactionId: string;\n}\n\nexport const TransactionActionsPanel: React.FC<TransactionActionsPanelProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n  const { isModalOpen, modalMode, loading, currentTransaction, openEditModal, closeModal, handleSubmit } =\n    useTransactionModal();\n\n  const handleEditClick = () => {\n    openEditModal(transactionId);\n  };\n\n  return (\n    <>\n      <Card title={t('transaction.actions')} style={{ marginTop: '24px' }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <EditTransactionButton transactionId={transactionId} block onClick={handleEditClick} />\n          <DeleteTransactionButton transactionId={transactionId} block />\n        </Space>\n      </Card>\n\n      <TransactionModal\n        open={isModalOpen}\n        onCancel={closeModal}\n        onSubmit={handleSubmit}\n        mode={modalMode}\n        transaction={currentTransaction}\n        loading={loading}\n      />\n    </>\n  );\n};\n","import { Card, Typography } from 'antd';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { selectTransaction } from 'src/entities/transaction/model/selectors';\n\nconst { Paragraph } = Typography;\n\ninterface TransactionDescriptionCardProps {\n  transactionId: string;\n}\n\nexport const TransactionDescriptionCard: React.FC<TransactionDescriptionCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n\n  const transaction = useSelector(selectTransaction);\n\n  if (!transaction || !transaction.description) return null;\n\n  return (\n    <Card title={t('transaction.description')} style={{ marginTop: '24px' }}>\n      <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', margin: 0 }}>{transaction.description}</Paragraph>\n    </Card>\n  );\n};\n","export type DateFormatOptions = {\n  includeTime?: boolean;\n  includeWeekday?: boolean;\n  short?: boolean;\n};\n\nexport const formatDateFull = (date: string | Date, locale = 'ru'): string =>\n  new Date(date).toLocaleDateString(locale === 'ru' ? 'ru-RU' : 'en-US', {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n","import { CalendarOutlined } from '@ant-design/icons';\nimport { Card, Descriptions, Typography } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { formatDateFull } from 'src/shared/lib/utils/date';\nimport { useSelector } from 'react-redux';\nimport { selectTransaction } from 'src/entities/transaction/model/selectors';\n\nconst { Text } = Typography;\n\ninterface TransactionDetailsPanelProps {\n  transactionId: string;\n}\n\nexport const TransactionDetailsPanel: React.FC<TransactionDetailsPanelProps> = ({ transactionId }) => {\n  const { t, currentLang } = useAppTranslation();\n\n  const transaction = useSelector(selectTransaction);\n\n  if (!transaction) return null;\n\n  return (\n    <Card title={t('transaction.details')}>\n      <Descriptions column={1} size=\"small\">\n        <Descriptions.Item label=\"ID операции\">\n          <Text code copyable>\n            {transaction.id}\n          </Text>\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={\n            <>\n              <CalendarOutlined /> {t('transaction.dateOfOperation')}\n            </>\n          }\n        >\n          <Text strong>{formatDateFull(transaction.date, currentLang)}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={t('transaction.createdAt')}>\n          <Text type=\"secondary\">{formatDateFull(transaction.createdAt, currentLang)}</Text>\n        </Descriptions.Item>\n        <Descriptions.Item label={t('transaction.updatedAt')}>\n          <Text type=\"secondary\">{formatDateFull(transaction.updatedAt, currentLang)}</Text>\n        </Descriptions.Item>\n      </Descriptions>\n    </Card>\n  );\n};\n","import { TagOutlined } from '@ant-design/icons';\nimport { Avatar, Card, Col, Row, Space, Statistic, Tag, theme, Typography } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { getTransactionTypeConfig } from 'src/pages/transactions/ui/utils/transactionConfig';\nimport { TransactionType } from 'src/shared/types';\nimport { useSelector } from 'react-redux';\nimport { selectTransaction } from 'src/entities/transaction/model/selectors';\n\nconst { Title } = Typography;\n\ninterface TransactionMainCardProps {\n  transactionId: string;\n}\n\nexport const TransactionMainCard: React.FC<TransactionMainCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n  const { token } = theme.useToken();\n\n  const transaction = useSelector(selectTransaction);\n\n  if (!transaction) return null;\n\n  const typeConfig = getTransactionTypeConfig(transaction.type, token, t);\n  const displayAmount = Math.abs(transaction.amount).toLocaleString('ru-RU');\n\n  const isIncome = transaction.type === TransactionType.INCOME;\n  const isExpense = transaction.type === TransactionType.EXPENSE;\n\n  return (\n    <Card\n      style={{\n        background: typeConfig.bgColor,\n        borderColor: typeConfig.borderColor,\n      }}\n    >\n      <Row align=\"middle\" gutter={24}>\n        <Col>\n          <Avatar\n            size={80}\n            style={{\n              backgroundColor: transaction.categoryColor + '20',\n              border: `3px solid ${transaction.categoryColor}`,\n              fontSize: '32px',\n            }}\n          >\n            {transaction.categoryIcon}\n          </Avatar>\n        </Col>\n        <Col flex=\"1\">\n          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n            <div>\n              <Title level={3} style={{ margin: 0, marginBottom: '8px' }}>\n                {transaction.title}\n              </Title>\n              <Tag color={typeConfig.color} style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px' }}>\n                <TagOutlined /> {typeConfig.text}\n              </Tag>\n              <Tag\n                color={transaction.categoryColor}\n                style={{\n                  fontSize: '14px',\n                  padding: '4px 12px',\n                  borderRadius: '20px',\n                  marginLeft: '8px',\n                }}\n              >\n                {transaction.categoryName}\n              </Tag>\n            </div>\n          </Space>\n        </Col>\n      </Row>\n\n      <Row style={{ marginTop: '24px' }}>\n        <Col span={24}>\n          <Statistic\n            title={t('transaction.amount')}\n            value={displayAmount}\n            suffix=\"₽\"\n            prefix={isIncome ? '+' : isExpense ? '−' : ''}\n            valueStyle={{\n              fontSize: '32px',\n              fontWeight: 'bold',\n              color: isIncome ? '#52c41a' : isExpense ? '#f5222d' : '#1677ff',\n            }}\n          />\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n","import { TransactionType } from 'src/shared';\n\nexport interface TransactionTypeConfig {\n  color: string;\n  text: string;\n  bgColor: string;\n  borderColor: string;\n}\n\nexport const getTransactionTypeConfig = (\n  transactionType: TransactionType,\n  token: any,\n  t: (key: string) => string\n): TransactionTypeConfig => {\n  switch (transactionType) {\n    case TransactionType.INCOME:\n      return {\n        color: 'success',\n        text: t('transaction.card.income'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    case TransactionType.EXPENSE:\n      return {\n        color: 'error',\n        text: t('transaction.card.expense'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    case TransactionType.TRANSFER:\n      return {\n        color: 'processing',\n        text: t('transaction.card.transfer'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n    default:\n      return {\n        color: 'default',\n        text: t('transaction.card.unknown'),\n        bgColor: token.colorBgContainer,\n        borderColor: token.colorBorder,\n      };\n  }\n};\n","import { Card, Space, Tag } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { useSelector } from 'react-redux';\nimport { selectTransaction } from 'src/entities/transaction/model/selectors';\n\ninterface TransactionTagsCardProps {\n  transactionId: string;\n}\n\nexport const TransactionTagsCard: React.FC<TransactionTagsCardProps> = ({ transactionId }) => {\n  const { t } = useAppTranslation();\n\n  const transaction = useSelector(selectTransaction);\n\n  if (!transaction || !transaction.tags || transaction.tags.length === 0) return null;\n\n  return (\n    <Card title={t('transaction.tags')} style={{ marginTop: '24px' }}>\n      <Space wrap>\n        {transaction.tags.map((tag: string, index: number) => (\n          <Tag key={index} color=\"blue\">\n            #{tag}\n          </Tag>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectProfileIsAdmin } from 'src/entities/profile/model/selectors';\nimport { TransactionActionsPanel } from './TransactionActionsPanel';\nimport { TransactionDescriptionCard } from './TransactionDescriptionCard';\nimport { TransactionDetailsPanel } from './TransactionDetailsPanel';\nimport { TransactionMainCard } from './TransactionMainCard';\nimport { TransactionTagsCard } from './TransactionTagsCard';\n\ninterface TransactionDetailProps {\n  transactionId: string;\n}\n\nexport const TransactionDetail: React.FC<TransactionDetailProps> = ({ transactionId }) => {\n  const isAdmin = useSelector(selectProfileIsAdmin);\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col xs={24} lg={16}>\n        <TransactionMainCard transactionId={transactionId} />\n        <TransactionDescriptionCard transactionId={transactionId} />\n        <TransactionTagsCard transactionId={transactionId} />\n      </Col>\n\n      <Col xs={24} lg={8}>\n        <TransactionDetailsPanel transactionId={transactionId} />\n        {isAdmin ? <TransactionActionsPanel transactionId={transactionId} /> : null}\n      </Col>\n    </Row>\n  );\n};\n","import { ArrowLeftOutlined } from '@ant-design/icons';\nimport { Button, Result } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MainLayout } from 'src/shared/ui/mainLayout';\n\ninterface TransactionNotFoundProps {\n  onBack: () => void;\n}\n\nexport const TransactionNotFound: React.FC<TransactionNotFoundProps> = ({ onBack }) => {\n  const { t } = useAppTranslation();\n  return (\n    <MainLayout>\n      <Result\n        status=\"404\"\n        title=\"404\"\n        subTitle={t('transaction.messages.notFound')}\n        extra={\n          <Button type=\"primary\" icon={<ArrowLeftOutlined />} onClick={onBack}>\n            {t('transaction.backToList')}\n          </Button>\n        }\n      />\n    </MainLayout>\n  );\n};\n","import { ArrowLeftOutlined, CalendarOutlined, EditOutlined, TagOutlined } from '@ant-design/icons';\nimport {\n  Avatar,\n  Button,\n  Card,\n  Col,\n  Descriptions,\n  message,\n  Popconfirm,\n  Row,\n  Space,\n  Statistic,\n  Tag,\n  Typography,\n} from 'antd';\nimport React from 'react';\nimport { formatDateFull } from 'src/shared/lib/utils/date';\n\nimport { Transaction } from 'src/shared/types';\nimport { TransactionTypeConfig } from '../utils/transactionConfig';\n\nconst { Title, Text, Paragraph } = Typography;\n\ninterface RenderProps {\n  transaction: Transaction;\n  typeConfig: TransactionTypeConfig;\n  displayAmount: string;\n  isIncome: boolean;\n  isExpense: boolean;\n  t: (key: string) => string;\n  currentLang: string;\n  navigate: (path: string) => void;\n}\n\nexport const renderPageHeader = ({ t, navigate }: Pick<RenderProps, 't' | 'navigate'>) => (\n  <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: '24px' }}>\n    <Col>\n      <Button icon={<ArrowLeftOutlined />} onClick={() => navigate('/transactions')} style={{ marginRight: '16px' }}>\n        {t('transaction.backToList')}\n      </Button>\n      <Title level={2} style={{ margin: 0, display: 'inline' }}>\n        {t('transaction.details')}\n      </Title>\n    </Col>\n  </Row>\n);\n\nexport const renderMainCard = ({\n  transaction,\n  typeConfig,\n  displayAmount,\n  isIncome,\n  isExpense,\n  t,\n}: Pick<RenderProps, 'transaction' | 'typeConfig' | 'displayAmount' | 'isIncome' | 'isExpense' | 't'>) => (\n  <Card\n    style={{\n      background: typeConfig.bgColor,\n      borderColor: typeConfig.borderColor,\n    }}\n  >\n    <Row align=\"middle\" gutter={24}>\n      <Col>\n        <Avatar\n          size={80}\n          style={{\n            backgroundColor: transaction.categoryColor + '20',\n            border: `3px solid ${transaction.categoryColor}`,\n            fontSize: '32px',\n          }}\n        >\n          {transaction.categoryIcon}\n        </Avatar>\n      </Col>\n      <Col flex=\"1\">\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <div>\n            <Title level={3} style={{ margin: 0, marginBottom: '8px' }}>\n              {transaction.title}\n            </Title>\n            <Tag color={typeConfig.color} style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px' }}>\n              <TagOutlined /> {typeConfig.text}\n            </Tag>\n            <Tag\n              color={transaction.categoryColor}\n              style={{ fontSize: '14px', padding: '4px 12px', borderRadius: '20px', marginLeft: '8px' }}\n            >\n              {transaction.categoryName}\n            </Tag>\n          </div>\n        </Space>\n      </Col>\n    </Row>\n\n    <Row style={{ marginTop: '24px' }}>\n      <Col span={24}>\n        <Statistic\n          title={t('transaction.amount')}\n          value={displayAmount}\n          suffix=\"₽\"\n          prefix={isIncome ? '+' : isExpense ? '−' : ''}\n          valueStyle={{\n            fontSize: '32px',\n            fontWeight: 'bold',\n            color: isIncome ? '#52c41a' : isExpense ? '#f5222d' : '#1677ff',\n          }}\n        />\n      </Col>\n    </Row>\n  </Card>\n);\n\nexport const renderDescriptionCard = ({ transaction, t }: Pick<RenderProps, 'transaction' | 't'>) => (\n  <Card title={t('transaction.description')} style={{ marginTop: '24px' }}>\n    <Paragraph style={{ fontSize: '16px', lineHeight: '1.6', margin: 0 }}>{transaction.description}</Paragraph>\n  </Card>\n);\n\nexport const renderTagsCard = ({ transaction, t }: Pick<RenderProps, 'transaction' | 't'>) => {\n  if (!transaction.tags?.length) return null;\n\n  return (\n    <Card title={t('transaction.tags')} style={{ marginTop: '24px' }}>\n      <Space wrap>\n        {transaction.tags.map((tag: string, index: number) => (\n          <Tag key={index} color=\"blue\">\n            #{tag}\n          </Tag>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n\nexport const renderDetailsPanel = ({\n  transaction,\n  t,\n  currentLang,\n}: Pick<RenderProps, 'transaction' | 't' | 'currentLang'>) => (\n  <Card title={t('transaction.details')}>\n    <Descriptions column={1} size=\"small\">\n      <Descriptions.Item label=\"ID операции\">\n        <Text code copyable>\n          {transaction.id}\n        </Text>\n      </Descriptions.Item>\n      <Descriptions.Item\n        label={\n          <>\n            <CalendarOutlined /> {t('transaction.dateOfOperation')}\n          </>\n        }\n      >\n        <Text strong>{formatDateFull(transaction.date, currentLang)}</Text>\n      </Descriptions.Item>\n      <Descriptions.Item label={t('transaction.createdAt')}>\n        <Text type=\"secondary\">{formatDateFull(transaction.createdAt, currentLang)}</Text>\n      </Descriptions.Item>\n      <Descriptions.Item label={t('transaction.updatedAt')}>\n        <Text type=\"secondary\">{formatDateFull(transaction.updatedAt, currentLang)}</Text>\n      </Descriptions.Item>\n    </Descriptions>\n  </Card>\n);\n\nexport const renderActionsPanel = ({ t }: Pick<RenderProps, 't'>) => (\n  <Card title={t('transaction.actions')} style={{ marginTop: '24px' }}>\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Button type=\"primary\" block icon={<EditOutlined />}>\n        {t('transaction.edit')}\n      </Button>\n      <Popconfirm\n        title={t('transaction.delete')}\n        okButtonProps={{ danger: true }}\n        onConfirm={() => message.success(t('transaction.messages.success'))}\n      >\n        <Button danger block>\n          {t('transaction.delete')}\n        </Button>\n      </Popconfirm>\n    </Space>\n  </Card>\n);\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { selectTransaction } from 'src/entities/transaction/model/selectors';\nimport { MainLayout, MainTitleWithTranslation } from 'src/shared/ui';\nimport { TransactionDetail } from 'src/widgets/transactionDetail';\nimport { TransactionNotFound } from './components';\nimport { fetchTransactionByIdThunk } from 'src/entities/transaction/model/thunks';\nimport { useAppDispatch } from 'src/app/store';\n\nconst TransactionDetailPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { t } = useAppTranslation();\n  const dispatch = useAppDispatch();\n  const transaction = useSelector(selectTransaction);\n\n  useEffect(() => {\n    if (!transaction) {\n      dispatch(fetchTransactionByIdThunk(id));\n    }\n  }, [transaction, id, dispatch]);\n\n  if (!id) {\n    return <TransactionNotFound onBack={() => navigate('/transactions')} />;\n  }\n\n  return (\n    <MainLayout>\n      <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\n        <MainTitleWithTranslation\n          title={t('transaction.details')}\n          onBack={() => navigate('/transactions')}\n          backTextKey=\"transaction.backToList\"\n        />\n        <TransactionDetail transactionId={id} />\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default TransactionDetailPage;\n"],"names":["TransactionActionsPanel","_ref","transactionId","t","useAppTranslation","_useTransactionModal","useTransactionModal","isModalOpen","modalMode","loading","currentTransaction","openEditModal","closeModal","handleSubmit","React","Card","title","style","marginTop","Space","direction","width","EditTransactionButton","block","onClick","DeleteTransactionButton","TransactionModal","open","onCancel","onSubmit","mode","transaction","Paragraph","Typography","TransactionDescriptionCard","useSelector","selectTransaction","description","fontSize","lineHeight","margin","formatDateFull","date","locale","arguments","length","undefined","Date","toLocaleDateString","day","month","year","hour","minute","Text","TransactionDetailsPanel","_useAppTranslation","currentLang","Descriptions","column","size","Item","label","code","copyable","id","CalendarOutlined","strong","type","createdAt","updatedAt","Title","TransactionMainCard","token","theme","useToken","typeConfig","transactionType","TransactionType","INCOME","color","text","bgColor","colorBgContainer","borderColor","colorBorder","EXPENSE","TRANSFER","getTransactionTypeConfig","displayAmount","Math","abs","amount","toLocaleString","isIncome","isExpense","background","Row","align","gutter","Col","Avatar","backgroundColor","categoryColor","border","concat","categoryIcon","flex","level","marginBottom","Tag","padding","borderRadius","TagOutlined","marginLeft","categoryName","span","Statistic","value","suffix","prefix","valueStyle","fontWeight","TransactionTagsCard","tags","wrap","map","tag","index","key","TransactionDetail","isAdmin","selectProfileIsAdmin","xs","lg","TransactionNotFound","onBack","MainLayout","Result","status","subTitle","extra","Button","icon","ArrowLeftOutlined","useParams","navigate","useNavigate","dispatch","useAppDispatch","useEffect","fetchTransactionByIdThunk","maxWidth","MainTitleWithTranslation","backTextKey"],"sourceRoot":""}