{"version":3,"file":"js/39.js","mappings":"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","sources":["webpack:///../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import * as React from 'react';\nimport React__default from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar isUndefined = (val) => val === undefined;\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React__default.createContext(null);\nHookFormContext.displayName = 'HookFormContext';\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React__default.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React__default.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React__default.useState(control._formState);\n    const _localProxyFormState = React__default.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React__default.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React__default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\n            get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _defaultValue = React__default.useRef(defaultValue);\n    const [value, updateValue] = React__default.useState(control._getWatch(name, _defaultValue.current));\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [name, control, disabled, exact]);\n    React__default.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React__default.useRef(props);\n    const _registerProps = React__default.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React__default.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React__default.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React__default.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React__default.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus && elm.focus(),\n                select: () => elm.select && elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React__default.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React__default.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React__default.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React__default.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React__default.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React__default.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React__default.createElement(React__default.Fragment, null, render({\n        submit,\n    }))) : (React__default.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, _internal_visited = new WeakSet()) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\n        return true;\n    }\n    _internal_visited.add(object1);\n    _internal_visited.add(object2);\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2, _internal_visited)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        if (foundError && foundError.root && foundError.root.type) {\n            return {\n                name: `${fieldName}.root`,\n                error: foundError.root,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = name + '.' + fieldKey;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = cloneObject(values);\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                unset(fieldValues, name);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (keepStateOptions.keepFieldsRef) {\n                    for (const fieldName of _names.mount) {\n                        setValue(fieldName, get(values, fieldName));\n                    }\n                }\n                else {\n                    _fields = {};\n                }\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _focusError,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React__default.useState(control._getFieldArray(name));\n    const ids = React__default.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React__default.useRef(fields);\n    const _name = React__default.useRef(name);\n    const _actioned = React__default.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React__default.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React__default.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React__default.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React__default.useCallback(swap, [updateValues, name, control]),\n        move: React__default.useCallback(move, [updateValues, name, control]),\n        prepend: React__default.useCallback(prepend, [updateValues, name, control]),\n        append: React__default.useCallback(append, [updateValues, name, control]),\n        remove: React__default.useCallback(remove, [updateValues, name, control]),\n        insert: React__default.useCallback(insert$1, [updateValues, name, control]),\n        update: React__default.useCallback(update, [updateValues, name, control]),\n        replace: React__default.useCallback(replace, [updateValues, name, control]),\n        fields: React__default.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React__default.useRef(undefined);\n    const _values = React__default.useRef(undefined);\n    const [formState, updateFormState] = React__default.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        if (props.formControl) {\n            _formControl.current = {\n                ...props.formControl,\n                formState,\n            };\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\n                props.formControl.reset(props.defaultValues, props.resetOptions);\n            }\n        }\n        else {\n            const { formControl, ...rest } = createFormControl(props);\n            _formControl.current = {\n                ...rest,\n                formState,\n            };\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React__default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React__default.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n    }, [control, props.mode, props.reValidateMode]);\n    React__default.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n            control._focusError();\n        }\n    }, [control, props.errors]);\n    React__default.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React__default.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React__default.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, {\n                keepFieldsRef: true,\n                ...control._options.resetOptions,\n            });\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React__default.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Blob","key","isKey","test","isUndefined","val","undefined","compact","filter","Boolean","stringToPath","input","replace","split","get","object","path","defaultValue","result","reduce","isBoolean","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","displayName","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","useIsomorphicLayoutEffect","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","Controller","props","render","methods","disabled","shouldUnregister","isArrayField","array","exact","_defaultValue","updateValue","_getWatch","current","_subscribe","values","callback","_formValues","_removeUnmounted","useWatch","updateFormState","_formState","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_setValid","useFormState","_props","_registerProps","register","rules","fieldState","defineProperties","invalid","enumerable","isTouched","error","ref","elm","field","_fields","_f","focus","select","setCustomValidity","message","reportValidity","_shouldUnregisterField","_options","updateMounted","mount","_state","action","unregister","_setDisabledField","useController","appendErrors","validateAllFieldCriteria","types","convertToArrayPayload","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isPrimitive","deepEqual","object1","object2","_internal_visited","WeakSet","getTime","keys1","keys","keys2","val1","includes","val2","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","isRadioInput","isRadioOrCheckbox","live","isConnected","unset","paths","childObject","updatePath","slice","baseGet","obj","isEmptyArray","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultResult","validResult","getCheckboxValue","options","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","files","refs","selectedOptions","getResolverOptions","fieldsNames","criteriaMode","shouldUseNativeValidation","isRegex","RegExp","getRuleValue","rule","source","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validate","find","validateFunction","hasValidation","required","min","max","maxLength","minLength","pattern","isWatched","isBlurEvent","some","watchName","startsWith","iterateFieldsByAction","abortEarly","currentField","schemaErrorLookup","join","foundError","root","pop","shouldRenderFormState","formStateData","shouldSubscribeByName","signalName","currentName","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","isFieldArray","inputValue","inputRef","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isReady","isSubmitting","isSubmitSuccessful","Set","unMount","timer","_proxySubscribeFormState","_subjects","state","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_runSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","validationModeBeforeSubmit","validationModeAfterSubmit","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","_setFormState","reRenderRoot","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepFieldsRef","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_setErrors","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","formControl","useForm","_formControl","_values","rest","sub"],"sourceRoot":""}