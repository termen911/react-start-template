{"version":3,"file":"js/785.js","mappings":"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","sources":["webpack:///./widgets/transactionList/ui/TransactionStats/TransactionStats.tsx","webpack:///./widgets/transactionList/ui/TransactionsList.tsx","webpack:///./pages/transactions/ui/TransactionsPage.tsx"],"sourcesContent":["import { Card, Col, Row, Typography } from 'antd';\nimport React, { FC } from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { Transaction, TransactionType } from 'src/shared/types';\n\nconst { Text, Title } = Typography;\n\ninterface TransactionStatsProps {\n  transactions: Transaction[];\n}\n\nexport const TransactionStats: FC<TransactionStatsProps> = ({ transactions }) => {\n  const { t } = useAppTranslation();\n  const income = transactions.filter((t) => t.type === TransactionType.INCOME).reduce((sum, t) => sum + t.amount, 0);\n\n  const expenses = Math.abs(\n    transactions.filter((t) => t.type === TransactionType.EXPENSE).reduce((sum, t) => sum + t.amount, 0)\n  );\n\n  const totalTransactions = transactions.length;\n\n  return (\n    <Card style={{ marginBottom: '24px' }}>\n      <Row gutter={16} align=\"middle\">\n        <Col span={8}>\n          <div style={{ textAlign: 'center' }}>\n            <Title level={4} style={{ margin: 0, color: '#52c41a' }}>\n              {income.toLocaleString('ru-RU')} ₽\n            </Title>\n            <Text type=\"secondary\">{t('transaction.stats.income')}</Text>\n          </div>\n        </Col>\n        <Col span={8}>\n          <div style={{ textAlign: 'center' }}>\n            <Title level={4} style={{ margin: 0, color: '#f5222d' }}>\n              {expenses.toLocaleString('ru-RU')} ₽\n            </Title>\n            <Text type=\"secondary\">{t('transaction.stats.expenses')}</Text>\n          </div>\n        </Col>\n        <Col span={8}>\n          <div style={{ textAlign: 'center' }}>\n            <Title level={4} style={{ margin: 0 }}>\n              {totalTransactions}\n            </Title>\n            <Text type=\"secondary\">{t('transaction.stats.total')}</Text>\n          </div>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n","import { Alert, Col, Pagination, Row, Spin } from 'antd';\nimport { PaginationProps } from 'antd/lib';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { useAppDispatch } from 'src/app/store';\nimport { TransactionCard } from 'src/entities/transaction';\nimport {\n  selectTransactions,\n  selectTransactionsError,\n  selectTransactionsStatus,\n} from 'src/entities/transaction/model/selectors';\nimport { setTransaction } from 'src/entities/transaction/model/slice';\nimport { fetchTransactionsThunk } from 'src/entities/transaction/model/thunks';\nimport { TransactionStats } from './TransactionStats';\n\nexport const TransactionsList = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { t } = useAppTranslation();\n  const [pagination, setPagination] = useState<PaginationProps>({\n    current: 1,\n    pageSize: 6,\n    total: 0,\n  });\n\n  // Получаем все транзакции из MockAPI\n  const transactions = useSelector(selectTransactions);\n  const transactionStatus = useSelector(selectTransactionsStatus);\n  const transactionError = useSelector(selectTransactionsError);\n\n  // Вычисляем текущие транзакции для отображения (с пагинацией)\n  const currentTransactions = useMemo(() => {\n    if (!transactions.length) return [];\n\n    // Сортируем транзакции\n    const sortedTransactions = [...transactions].sort(\n      (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n\n    // Применяем пагинацию\n    const startIndex = (pagination.current - 1) * pagination.pageSize;\n    const endIndex = startIndex + pagination.pageSize;\n\n    return sortedTransactions.slice(startIndex, endIndex);\n  }, [transactions, pagination]);\n\n  useEffect(() => {\n    if (!transactions.length) {\n      dispatch(fetchTransactionsThunk());\n    }\n  }, [transactions, dispatch]);\n\n  // Обновляем total в пагинации когда получены транзакции\n  useEffect(() => {\n    if (transactionStatus === 'fulfilled') {\n      setPagination((prev) => ({\n        ...prev,\n        total: transactions.length,\n      }));\n    }\n  }, [transactionStatus, transactions.length]);\n\n  const handleCardClick = (id: string) => {\n    dispatch(setTransaction(transactions.find((transaction) => transaction.id === id) || null));\n    navigate(`/transactions/${id}`);\n  };\n\n  const handlePaginationChange = (page: number, pageSize?: number) => {\n    setPagination((prev) => ({\n      ...prev,\n      current: page,\n      pageSize: pageSize || prev.pageSize,\n    }));\n  };\n\n  return (\n    <Spin spinning={transactionStatus === 'loading'}>\n      {transactionError && <Alert message={transactionError} type=\"error\" showIcon />}\n\n      {/* Статистика */}\n      <TransactionStats transactions={transactions} />\n\n      {/* Сетка карточек транзакций */}\n      <Row gutter={[16, 16]}>\n        {currentTransactions.map((transaction) => (\n          <Col xs={24} sm={12} lg={8} xl={8} key={transaction.id}>\n            <TransactionCard transaction={transaction} onClick={handleCardClick} />\n          </Col>\n        ))}\n      </Row>\n\n      {/* Пагинация */}\n      {transactions.length > pagination.pageSize && (\n        <div style={{ textAlign: 'center', marginTop: '32px' }}>\n          <Pagination\n            current={pagination.current}\n            total={pagination.total}\n            pageSize={pagination.pageSize}\n            onChange={handlePaginationChange}\n            showSizeChanger={true}\n            pageSizeOptions={['6', '12', '18', '24', '100']}\n            showQuickJumper={false}\n            showTotal={(total, range) =>\n              t('transaction.pagination.titleOfPage', {\n                viewed: range[0],\n                all: range[1],\n                total,\n              })\n            }\n          />\n        </div>\n      )}\n    </Spin>\n  );\n};\n","import { Col, Flex, Row } from 'antd';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { useAppDispatch } from 'src/app/store';\nimport { selectProfileIsAdmin } from 'src/entities/profile/model/selectors';\nimport { selectTransactions } from 'src/entities/transaction/model/selectors';\nimport { fetchTransactionsThunk } from 'src/entities/transaction/model/thunks';\nimport { CreateTransactionButton, TransactionModal, useTransactionModal } from 'src/features/transaction';\nimport { MainLayout, MainTitle } from 'src/shared/ui';\nimport { TransactionsList } from 'src/widgets/transactionList';\n\nconst TransactionsPage = () => {\n  const { t } = useAppTranslation();\n  const { isModalOpen, modalMode, loading, currentTransaction, openCreateModal, closeModal, handleSubmit } =\n    useTransactionModal();\n\n  const dispatch = useAppDispatch();\n  const isAdmin = useSelector(selectProfileIsAdmin);\n  const transactions = useSelector(selectTransactions);\n\n  useEffect(() => {\n    if (!transactions.length) {\n      dispatch(fetchTransactionsThunk());\n    }\n  }, [dispatch, transactions]);\n\n  return (\n    <MainLayout>\n      <Flex vertical gap={32}>\n        <Row justify=\"space-between\" align=\"middle\">\n          <Col>\n            <MainTitle title={t('transaction.title')} level={3} />\n          </Col>\n          <Col>{isAdmin && <CreateTransactionButton onClick={openCreateModal} />}</Col>\n        </Row>\n        <TransactionsList />\n      </Flex>\n\n      <TransactionModal\n        open={isModalOpen}\n        onSubmit={handleSubmit}\n        mode={modalMode}\n        transaction={currentTransaction} // Исправлено: передаем объект транзакции вместо ID\n        loading={loading}\n        onCancel={closeModal}\n      />\n    </MainLayout>\n  );\n};\n\nexport default TransactionsPage;\n"],"names":["Text","Typography","Title","TransactionStats","_ref","transactions","t","useAppTranslation","income","filter","type","TransactionType","INCOME","reduce","sum","amount","expenses","Math","abs","EXPENSE","totalTransactions","length","React","Card","style","marginBottom","Row","gutter","align","Col","span","textAlign","level","margin","color","toLocaleString","TransactionsList","dispatch","useAppDispatch","navigate","useNavigate","_useState2","useState","current","pageSize","total","pagination","setPagination","useSelector","selectTransactions","transactionStatus","selectTransactionsStatus","transactionError","selectTransactionsError","currentTransactions","useMemo","sortedTransactions","_toConsumableArray","sort","a","b","Date","updatedAt","getTime","startIndex","endIndex","slice","useEffect","fetchTransactionsThunk","prev","_objectSpread","handleCardClick","id","setTransaction","find","transaction","concat","Spin","spinning","Alert","message","showIcon","map","xs","sm","lg","xl","key","TransactionCard","onClick","marginTop","Pagination","onChange","page","showSizeChanger","pageSizeOptions","showQuickJumper","showTotal","range","viewed","all","_useTransactionModal","useTransactionModal","isModalOpen","modalMode","loading","currentTransaction","openCreateModal","closeModal","handleSubmit","isAdmin","selectProfileIsAdmin","MainLayout","Flex","vertical","gap","justify","MainTitle","title","CreateTransactionButton","TransactionModal","open","onSubmit","mode","onCancel"],"sourceRoot":""}