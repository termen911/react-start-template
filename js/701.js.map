{"version":3,"file":"js/701.js","mappings":"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","sources":["webpack:///./features/profileForm/ui/ProfileForm.tsx","webpack:///./features/profileForm/model/useProfileForm.ts","webpack:///./pages/profile/ui/ProfilePage.tsx","webpack:///./shared/api/types/error.ts","webpack:///./shared/lib/consts/api.consts.ts"],"sourcesContent":["import { UserOutlined } from '@ant-design/icons';\nimport { Button, Card, Form, Input } from 'antd';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { useAppTranslation } from 'src/app/providers/i18n/useAppTranslation';\nimport { selectSessionUser } from 'src/entities/session/model/selectors';\nimport { Profile } from '../model/types';\nimport { useProfileForm } from '../model/useProfileForm';\n\nexport const ProfileForm = () => {\n  const { t } = useAppTranslation();\n  const user = useSelector(selectSessionUser);\n\n  const { control, handleSubmit, errors, isSubmitting } = useProfileForm();\n\n  const onFormSubmit = (formData: Profile) => {\n    console.log(formData);\n  };\n\n  return (\n    <Card style={{ width: '100%', margin: '0 auto' }}>\n      <Form layout=\"vertical\" onFinish={handleSubmit(onFormSubmit)}>\n        <Form.Item label={t('profile.id.label')} validateStatus={errors.id ? 'error' : ''} help={errors.id?.message}>\n          <Controller\n            name=\"id\"\n            control={control}\n            render={({ field }) => (\n              <Input {...field} readOnly size=\"large\" placeholder={t('profile.id.placeholder')} value={user?.id} />\n            )}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={t('profile.name.label')}\n          validateStatus={errors.name ? 'error' : ''}\n          help={errors.name?.message}\n          required\n        >\n          <Controller\n            name=\"name\"\n            control={control}\n            rules={{\n              required: t('profile.name.validation.required'),\n              minLength: {\n                value: 2,\n                message: t('profile.name.validation.minLength'),\n              },\n              maxLength: {\n                value: 50,\n                message: t('profile.name.validation.maxLength'),\n              },\n            }}\n            render={({ field }) => (\n              <Input\n                {...field}\n                size=\"large\"\n                prefix={<UserOutlined />}\n                placeholder={t('profile.name.placeholder')}\n                allowClear\n                value={user?.name}\n              />\n            )}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={t('profile.email.label')}\n          validateStatus={errors.email ? 'error' : ''}\n          help={errors.email?.message}\n        >\n          <Controller\n            name=\"email\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                {...field}\n                readOnly\n                size=\"large\"\n                placeholder={t('profile.email.placeholder')}\n                value={user?.email}\n              />\n            )}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={t('profile.signUpDate.label')}\n          validateStatus={errors.signUpDate ? 'error' : ''}\n          help={errors.signUpDate?.message}\n          required\n        >\n          <Controller\n            name=\"signUpDate\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                {...field}\n                readOnly\n                size=\"large\"\n                placeholder={t('profile.signUpDate.placeholder')}\n                value={user?.signUpDate.toLocaleDateString()}\n              />\n            )}\n          />\n        </Form.Item>\n\n        <Form.Item style={{ textAlign: 'end', marginTop: 32 }}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            loading={isSubmitting}\n            disabled={isSubmitting}\n            style={{ minWidth: 120 }}\n          >\n            {t('profile.buttons.save')}\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n","import { useForm } from 'react-hook-form';\nimport { Profile } from './types';\nimport { COMMAND_ID } from 'src/shared/lib/consts/api.consts';\n\nexport const useProfileForm = () => {\n  const {\n    control,\n    handleSubmit,\n    setError,\n    formState: { errors, isSubmitting },\n  } = useForm<Profile>({\n    defaultValues: {\n      id: '',\n      name: '',\n      email: '',\n      signUpDate: new Date(),\n      commandId: COMMAND_ID,\n    },\n  });\n\n  return {\n    control,\n    handleSubmit,\n    errors,\n    isSubmitting,\n    setError,\n  };\n};\n","import { Flex } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { ProfileForm } from 'src/features/profileForm';\nimport { MainTitleWithTranslation } from 'src/shared';\nimport { MainLayout } from 'src/shared/ui/mainLayout';\n\nconst ProfilePage = () => {\n  const { t } = useAppTranslation();\n\n  return (\n    <MainLayout>\n      <MainTitleWithTranslation title={t('profile.title')} />\n      <Flex justify=\"center\" style={{ minWidth: '500px' }}>\n        <ProfileForm />\n      </Flex>\n    </MainLayout>\n  );\n};\n\nexport default ProfilePage;\n","export type ServerErrors = {\n  errors: {\n    extensions: {\n      code: ErrorCode;\n    };\n\n    name: string;\n    fieldName?: string;\n    stack: string;\n    message: string;\n  }[];\n};\n\nexport type ClientError = {\n  code: ErrorCode;\n  message: string;\n  fieldName?: string;\n};\n\nexport enum ErrorCode {\n  ERR_INCORRECT_EMAIL_OR_PASSWORD = 'ERR_INCORRECT_EMAIL_OR_PASSWORD', // Если не корректный email или пароль\n  ERR_ACCOUNT_ALREADY_EXIST = 'ERR_ACCOUNT_ALREADY_EXIST', // При регистрации если пользователь уже существует\n  ERR_FIELD_REQUIRED = 'ERR_FIELD_REQUIRED', // Обязательное поле. В ошибке будет дополнительное поле fieldName с указанием, какое конкретно поле обязательно\n  ERR_INCORRECT_PASSWORD = 'ERR_INCORRECT_PASSWORD', // Некорректный старый пароль при попытке его изменить\n  ERR_INVALID_PASSWORD = 'ERR_INVALID_PASSWORD', // Пароль не соответствует регулярному выражению /^[\\w-@{}()#$%^&*+=!~]{8,}$/\n  ERR_NOT_VALID = 'ERR_NOT_VALID', // Не валидный id сущности\n  ERR_AUTH = 'ERR_AUTH', // Токен не передан, либо не прошел авторизацию\n  ERR_NO_FILES = 'ERR_NO_FILES', // Ошибка при загрузке файлов\n  ERR_NOT_ALLOWED = 'ERR_NOT_ALLOWED', // Нет доступа к данной операции (нельзя редактировать заказ другого пользователя)\n  ERR_NOT_FOUND = 'ERR_NOT_FOUND', // Сущность не найдена\n  ERR_VALIDATION_ERROR = 'ERR_VALIDATION_ERROR', // Не валидные данные, например, не указано name\n  ERR_INVALID_QUERY_PARAMS = 'ERR_INVALID_QUERY_PARAMS', // Все GET запросы могут принимать данные запроса в search params в формате { [key: string]: string // Нужно использовать JSON.stringify() }\n  ERR_INTERNAL_SERVER = 'ERR_INTERNAL_SERVER', // Серверная ошибка. Обратитесь ко мне, этой ошибки быть не должно\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR', // Неизвестная ошибка\n}\n","import { ErrorCode } from 'src/shared/api/types/error';\n\nexport const COMMAND_ID = 'sergn-react-start-template-test1';\n\nexport const UNKNOWN_ERROR_MESSAGE = {\n  name: 'Unknown error',\n  stack: 'Unknown error',\n  message: 'Unknown error',\n  extensions: {\n    code: ErrorCode.UNKNOWN_ERROR,\n  },\n};\n"],"names":["ProfileForm","_errors$id","_errors$name","_errors$email","_errors$signUpDate","t","useAppTranslation","user","useSelector","selectSessionUser","_useProfileForm","_useForm","useForm","defaultValues","id","name","email","signUpDate","Date","commandId","COMMAND_ID","control","handleSubmit","setError","_useForm$formState","formState","errors","isSubmitting","useProfileForm","React","Card","style","width","margin","Form","layout","onFinish","formData","console","log","Item","label","validateStatus","help","message","Controller","render","_ref","field","Input","_extends","readOnly","size","placeholder","value","required","rules","minLength","maxLength","_ref2","prefix","UserOutlined","allowClear","_ref3","_ref4","toLocaleDateString","textAlign","marginTop","Button","type","htmlType","loading","disabled","minWidth","MainLayout","MainTitleWithTranslation","title","Flex","justify","ErrorCode","UNKNOWN_ERROR"],"sourceRoot":""}