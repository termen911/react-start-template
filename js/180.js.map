{"version":3,"file":"js/180.js","mappings":"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","sources":["webpack:///./features/transaction/create/ui/CreateTransactionButton/CreateTransactionButton.tsx","webpack:///./features/transaction/delete/ui/DeleteTransactionButton/DeleteTransactionButton.tsx","webpack:///./features/transaction/edit/ui/EditTransactionButton/EditTransactionButton.tsx","webpack:///./features/transaction/form/model/constants.ts","webpack:///./features/transaction/form/ui/TransactionForm.tsx","webpack:///./features/transaction/form/model/validation.ts","webpack:///./features/transaction/modal/model/useTransactionModal.ts","webpack:///./features/transaction/modal/ui/TransactionModal.tsx","webpack:///./shared/api/mock/transactions.ts","webpack:///./shared/api/mock/index.ts","webpack:///./shared/api/mock/types.ts"],"sourcesContent":["import { PlusOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\n\ninterface CreateTransactionButtonProps {\n  onClick?: () => void;\n  size?: 'small' | 'middle' | 'large';\n  type?: 'default' | 'primary' | 'dashed' | 'link' | 'text';\n}\n\nexport const CreateTransactionButton: React.FC<CreateTransactionButtonProps> = ({\n  onClick,\n  size = 'large',\n  type = 'primary',\n}) => {\n  const { t } = useAppTranslation();\n\n  return (\n    <Button type={type} size={size} icon={<PlusOutlined />} onClick={onClick}>\n      {t('transaction.create')}\n    </Button>\n  );\n};\n","import { Button, message, Popconfirm } from 'antd';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppTranslation } from 'src/app/providers/i18n';\n\ninterface DeleteTransactionButtonProps {\n  transactionId: string;\n  block?: boolean;\n  onSuccess?: () => void;\n}\n\nexport const DeleteTransactionButton: React.FC<DeleteTransactionButtonProps> = ({\n  transactionId,\n  block = false,\n  onSuccess,\n}) => {\n  const { t } = useAppTranslation();\n  const navigate = useNavigate();\n\n  const handleDelete = async () => {\n    console.log('handleDelete transactionId', transactionId);\n    try {\n      // Здесь будет вызов API для удаления транзакции\n      // await MockAPI.deleteTransaction(transactionId);\n\n      message.success(t('transaction.messages.deleteSuccess'));\n\n      if (onSuccess) {\n        onSuccess();\n      } else {\n        // Если не передан onSuccess, перенаправляем к списку\n        navigate('/transactions');\n      }\n    } catch (error) {\n      message.error(t('transaction.messages.deleteError'));\n    }\n  };\n\n  return (\n    <Popconfirm\n      title={t('transaction.messages.confirmDelete')}\n      description={t('transaction.messages.deleteWarning')}\n      okButtonProps={{ danger: true }}\n      okText={t('common.delete')}\n      cancelText={t('common.cancel')}\n      onConfirm={handleDelete}\n    >\n      <Button danger block={block}>\n        {t('transaction.delete')}\n      </Button>\n    </Popconfirm>\n  );\n};\n","import { EditOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\n\ninterface EditTransactionButtonProps {\n  transactionId: string;\n  block?: boolean;\n  onClick?: (transactionId: string) => void;\n}\n\nexport const EditTransactionButton: React.FC<EditTransactionButtonProps> = ({\n  transactionId,\n  block = false,\n  onClick,\n}) => {\n  const { t } = useAppTranslation();\n\n  const handleEdit = () => {\n    if (onClick) {\n      onClick(transactionId);\n    }\n  };\n\n  return (\n    <Button type=\"primary\" block={block} icon={<EditOutlined />} onClick={handleEdit}>\n      {t('transaction.edit')}\n    </Button>\n  );\n};\n","import type { CategoryOption } from './types';\n\n// Предустановленные категории для разных типов операций\nexport const INCOME_CATEGORIES: CategoryOption[] = [\n  { name: 'transaction.form.categories.income.salary', icon: '💼', color: '#4CAF50' },\n  { name: 'transaction.form.categories.income.freelance', icon: '💻', color: '#2E7D32' },\n  { name: 'transaction.form.categories.income.investments', icon: '📈', color: '#1B5E20' },\n  { name: 'transaction.form.categories.income.bonuses', icon: '🎁', color: '#388E3C' },\n  { name: 'transaction.form.categories.income.other', icon: '💰', color: '#66BB6A' },\n];\n\nexport const EXPENSE_CATEGORIES: CategoryOption[] = [\n  { name: 'transaction.form.categories.expense.products', icon: '🛒', color: '#E64A19' },\n  { name: 'transaction.form.categories.expense.restaurants', icon: '🍽️', color: '#D84315' },\n  { name: 'transaction.form.categories.expense.gas', icon: '⛽', color: '#1976D2' },\n  { name: 'transaction.form.categories.expense.utilities', icon: '⚡', color: '#5D4037' },\n  { name: 'transaction.form.categories.expense.entertainment', icon: '🎬', color: '#9C27B0' },\n  { name: 'transaction.form.categories.expense.transport', icon: '🚌', color: '#1565C0' },\n  { name: 'transaction.form.categories.expense.health', icon: '💊', color: '#E91E63' },\n  { name: 'transaction.form.categories.expense.shopping', icon: '🛍️', color: '#FF9800' },\n  { name: 'transaction.form.categories.expense.education', icon: '📚', color: '#607D8B' },\n  { name: 'transaction.form.categories.expense.rent', icon: '🔑', color: '#6D4C41' },\n  { name: 'transaction.form.categories.expense.other', icon: '💸', color: '#9E9E9E' },\n];\n\nexport const TRANSFER_CATEGORIES: CategoryOption[] = [\n  { name: 'transaction.form.categories.transfer.transfer', icon: '💸', color: '#66BB6A' },\n  { name: 'transaction.form.categories.transfer.investments', icon: '📈', color: '#1B5E20' },\n  { name: 'transaction.form.categories.transfer.savings', icon: '💰', color: '#4CAF50' },\n];\n","import { CalendarOutlined, DollarOutlined, FileTextOutlined, TagOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Flex,\n  Form,\n  Input,\n  InputNumber,\n  Radio,\n  Row,\n  Space,\n  Tag,\n  Typography,\n} from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useEffect, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { TransactionType } from 'src/shared/api/mock';\n\nimport { EXPENSE_CATEGORIES, INCOME_CATEGORIES, TRANSFER_CATEGORIES } from '../model/constants';\nimport { CategoryOption, TransactionFormData, TransactionFormProps } from '../model/types';\nimport { createTransactionValidationRules } from '../model/validation';\n\nconst { TextArea } = Input;\nconst { Text } = Typography;\n\nexport const TransactionForm: React.FC<TransactionFormProps> = ({ onSubmit, defaultValues = {}, loading = false }) => {\n  const { t } = useAppTranslation();\n  const [selectedType, setSelectedType] = useState<TransactionType>(defaultValues.type || TransactionType.EXPENSE);\n  const [selectedCategory, setSelectedCategory] = useState<CategoryOption | null>(null);\n  const [tagInput, setTagInput] = useState<string>('');\n\n  const validationRules = createTransactionValidationRules(t);\n\n  useEffect(() => {\n    console.log(3334, defaultValues);\n  }, [defaultValues]);\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n    watch,\n    setValue,\n  } = useForm<TransactionFormData>({\n    defaultValues: {\n      type: TransactionType.EXPENSE,\n      amount: 0,\n      title: '',\n      description: '',\n      categoryName: '',\n      categoryIcon: '',\n      categoryColor: '',\n      date: new Date().toISOString().split('T')[0],\n      tags: [],\n      ...defaultValues,\n    },\n    mode: 'onChange',\n  });\n\n  const watchedType = watch('type');\n  const watchedTags = watch('tags') || [];\n\n  // Обновляем selectedType при изменении типа в форме\n  useEffect(() => {\n    setSelectedType(watchedType);\n  }, [watchedType]);\n\n  // Получаем категории в зависимости от типа операции\n  const getCategories = (type: TransactionType): CategoryOption[] => {\n    switch (type) {\n      case TransactionType.INCOME:\n        return INCOME_CATEGORIES;\n      case TransactionType.EXPENSE:\n        return EXPENSE_CATEGORIES;\n      case TransactionType.TRANSFER:\n        return TRANSFER_CATEGORIES;\n      default:\n        return EXPENSE_CATEGORIES;\n    }\n  };\n\n  const categories = getCategories(selectedType);\n\n  // Обработчик выбора категории\n  const handleCategorySelect = (category: CategoryOption, checked: boolean) => {\n    setSelectedCategory(checked ? category : null);\n    setValue('categoryName', t(category.name, { locale: 'ru' }));\n    setValue('categoryIcon', category.icon);\n    setValue('categoryColor', category.color);\n  };\n\n  // Обработчик добавления тега\n  const handleAddTag = () => {\n    if (tagInput.trim() && !watchedTags.includes(tagInput.trim())) {\n      const newTags = [...watchedTags, tagInput.trim()];\n      setValue('tags', newTags);\n      setTagInput('');\n    }\n  };\n\n  // Обработчик удаления тега\n  const handleRemoveTag = (tagToRemove: string) => {\n    const newTags = watchedTags.filter((tag) => tag !== tagToRemove);\n    setValue('tags', newTags);\n  };\n\n  const onFormSubmit = (data: TransactionFormData) => {\n    try {\n      onSubmit(data);\n    } catch (error) {\n      console.error('Ошибка при сохранении транзакции:', error);\n    }\n  };\n\n  const onReset = () => {\n    reset({\n      type: defaultValues.type || TransactionType.EXPENSE,\n      amount: defaultValues.amount || 0,\n      title: defaultValues.title || '',\n      description: defaultValues.description || '',\n      categoryName: defaultValues.categoryName || '',\n      categoryIcon: defaultValues.categoryIcon || '',\n      categoryColor: defaultValues.categoryColor || '',\n      date: defaultValues.date || new Date().toISOString().split('T')[0],\n      tags: defaultValues.tags || [],\n    });\n    setSelectedCategory(null);\n    setTagInput('');\n  };\n\n  return (\n    <Card style={{ width: '100%' }}>\n      <Form layout=\"vertical\" onFinish={handleSubmit(onFormSubmit)}>\n        {/* Тип операции */}\n        <Form.Item\n          label={t('transaction.form.type.label')}\n          validateStatus={errors.type ? 'error' : ''}\n          help={errors.type?.message}\n          required\n        >\n          <Controller\n            name=\"type\"\n            control={control as any}\n            rules={validationRules.type}\n            render={({ field }) => (\n              <Radio.Group {...field} size=\"large\">\n                <Radio.Button value={TransactionType.INCOME}>💰 {t('transaction.form.type.income')}</Radio.Button>\n                <Radio.Button value={TransactionType.EXPENSE}>💸 {t('transaction.form.type.expense')}</Radio.Button>\n                <Radio.Button value={TransactionType.TRANSFER}>🔄 {t('transaction.form.type.transfer')}</Radio.Button>\n              </Radio.Group>\n            )}\n          />\n        </Form.Item>\n\n        {/* Сумма и название в одном ряду */}\n        <Row gutter={16}>\n          <Col xs={24} md={8}>\n            <Form.Item\n              label={t('transaction.form.amount.label')}\n              validateStatus={errors.amount ? 'error' : ''}\n              help={errors.amount?.message}\n              required\n            >\n              <Controller\n                name=\"amount\"\n                control={control as any}\n                rules={validationRules.amount}\n                render={({ field }) => (\n                  <InputNumber\n                    {...field}\n                    placeholder={t('transaction.form.amount.placeholder')}\n                    prefix={<DollarOutlined />}\n                    size=\"large\"\n                    style={{ width: '100%' }}\n                    min={0.01}\n                    step={0.01}\n                    precision={2}\n                    formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                    parser={(value) => value!.replace(/\\$\\s?|(,*)/g, '')}\n                  />\n                )}\n              />\n            </Form.Item>\n          </Col>\n          <Col xs={24} md={16}>\n            <Form.Item\n              label={t('transaction.form.title.label')}\n              validateStatus={errors.title ? 'error' : ''}\n              help={errors.title?.message}\n              required\n            >\n              <Controller\n                name=\"title\"\n                control={control as any}\n                rules={validationRules.title}\n                render={({ field }) => (\n                  <Input\n                    {...field}\n                    placeholder={t('transaction.form.title.placeholder')}\n                    prefix={<FileTextOutlined />}\n                    size=\"large\"\n                  />\n                )}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        {/* Категория */}\n        <Form.Item\n          label={t('transaction.form.category.label')}\n          validateStatus={errors.categoryName ? 'error' : ''}\n          help={errors.categoryName?.message}\n          required\n        >\n          <div style={{ marginBottom: '8px' }}>\n            <Text type=\"secondary\">{t('transaction.form.category.help')}</Text>\n          </div>\n          <Space wrap>\n            {categories.map((category) => (\n              <Tag.CheckableTag\n                key={category.name}\n                checked={\n                  selectedCategory?.name === category.name ||\n                  defaultValues.categoryName === t(category.name, { locale: 'ru' })\n                }\n                onChange={(checked) => handleCategorySelect(category, checked)}\n              >\n                {category.icon} {t(category.name)}\n              </Tag.CheckableTag>\n            ))}\n          </Space>\n        </Form.Item>\n\n        {/* Дата */}\n        <Form.Item\n          label={t('transaction.form.date.label')}\n          validateStatus={errors.date ? 'error' : ''}\n          help={errors.date?.message}\n          required\n        >\n          <Controller\n            name=\"date\"\n            control={control as any}\n            rules={validationRules.date}\n            render={({ field }) => (\n              <DatePicker\n                {...field}\n                value={field.value ? dayjs(field.value) : null}\n                onChange={(date) => field.onChange(date?.format('YYYY-MM-DD'))}\n                placeholder={t('transaction.form.date.placeholder')}\n                prefix={<CalendarOutlined />}\n                size=\"large\"\n                style={{ width: '100%' }}\n                disabledDate={(current) => current && current > dayjs().endOf('day')}\n              />\n            )}\n          />\n        </Form.Item>\n\n        {/* Описание */}\n        <Form.Item\n          label={t('transaction.form.description.label')}\n          validateStatus={errors.description ? 'error' : ''}\n          help={errors.description?.message}\n        >\n          <Controller\n            name=\"description\"\n            control={control as any}\n            rules={validationRules.description}\n            render={({ field }) => (\n              <TextArea\n                {...field}\n                placeholder={t('transaction.form.description.placeholder')}\n                rows={3}\n                maxLength={500}\n                showCount\n                size=\"large\"\n              />\n            )}\n          />\n        </Form.Item>\n\n        {/* Теги */}\n        <Form.Item\n          label={t('transaction.form.tags.label')}\n          validateStatus={errors.tags ? 'error' : ''}\n          help={errors.tags?.message}\n        >\n          <div style={{ marginBottom: '8px' }}>\n            <Space.Compact style={{ width: '100%' }}>\n              <Input\n                placeholder={t('transaction.form.tags.placeholder')}\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onPressEnter={handleAddTag}\n                prefix={<TagOutlined />}\n                size=\"large\"\n              />\n              <Button type=\"primary\" onClick={handleAddTag} size=\"large\">\n                {t('transaction.form.tags.add')}\n              </Button>\n            </Space.Compact>\n          </div>\n          {watchedTags.length > 0 && (\n            <Space wrap>\n              {watchedTags.map((tag) => (\n                <Tag\n                  key={tag}\n                  closable\n                  onClose={() => handleRemoveTag(tag)}\n                  style={{ fontSize: '12px', padding: '2px 8px' }}\n                >\n                  {tag}\n                </Tag>\n              ))}\n            </Space>\n          )}\n        </Form.Item>\n\n        {/* Кнопки */}\n        <Form.Item>\n          <Flex justify=\"end\" gap={16}>\n            <Button type=\"text\" onClick={onReset} disabled={loading || isSubmitting} size=\"large\">\n              {t('transaction.form.buttons.reset')}\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading || isSubmitting} size=\"large\">\n              {t('transaction.form.buttons.save')}\n            </Button>\n          </Flex>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n","import { RegisterOptions } from 'react-hook-form';\nimport { TransactionFormData } from './types';\n\nexport const createTransactionValidationRules = (t: (key: string) => string) => {\n  const rules: Record<keyof TransactionFormData, RegisterOptions> = {\n    type: {\n      required: t('transaction.form.validation.typeRequired'),\n    },\n    amount: {\n      required: t('transaction.form.validation.amountRequired'),\n      min: {\n        value: 0.01,\n        message: t('transaction.form.validation.amountMin'),\n      },\n      max: {\n        value: 1000000000,\n        message: t('transaction.form.validation.amountMax'),\n      },\n    },\n    title: {\n      required: t('transaction.form.validation.titleRequired'),\n      minLength: {\n        value: 3,\n        message: t('transaction.form.validation.titleMinLength'),\n      },\n      maxLength: {\n        value: 100,\n        message: t('transaction.form.validation.titleMaxLength'),\n      },\n    },\n    description: {\n      maxLength: {\n        value: 500,\n        message: t('transaction.form.validation.descriptionMaxLength'),\n      },\n    },\n    categoryName: {\n      required: t('transaction.form.validation.categoryRequired'),\n    },\n    categoryIcon: {\n      required: t('transaction.form.validation.categoryRequired'),\n    },\n    categoryColor: {\n      required: t('transaction.form.validation.categoryRequired'),\n    },\n    date: {\n      required: t('transaction.form.validation.dateRequired'),\n      validate: (value: string) => {\n        const selectedDate = new Date(value);\n        const today = new Date();\n        today.setHours(23, 59, 59, 999); // Устанавливаем конец дня\n\n        if (selectedDate > today) {\n          return t('transaction.form.validation.dateFuture');\n        }\n        return true;\n      },\n    },\n    tags: {\n      validate: (value?: string[]) => {\n        if (!value) return true;\n        if (value.length > 10) {\n          return t('transaction.form.validation.tagsMaxCount');\n        }\n        for (const tag of value) {\n          if (tag.length > 20) {\n            return t('transaction.form.validation.tagMaxLength');\n          }\n        }\n        return true;\n      },\n    },\n  };\n\n  return rules;\n};\n","import { message } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { CreateTransactionData, MockAPI, UpdateTransactionData } from 'src/shared/api/mock';\nimport { TransactionFormData } from '../../form';\nimport { TransactionModalMode, UseTransactionModalResult } from './types';\n\nexport const useTransactionModal = (): UseTransactionModalResult => {\n  const { t } = useAppTranslation();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalMode, setModalMode] = useState<TransactionModalMode>('create');\n  const [loading, setLoading] = useState(false);\n  const [editingTransactionId, setEditingTransactionId] = useState<string | null>(null);\n\n  // Функция для парсинга хеша\n  const parseHash = (hash: string) => {\n    if (hash === '#create') {\n      return { mode: 'create' as TransactionModalMode, id: null };\n    }\n\n    const editMatch = hash.match(/^#edit\\/(.+)$/);\n    if (editMatch) {\n      return { mode: 'edit' as TransactionModalMode, id: editMatch[1] };\n    }\n\n    return null;\n  };\n\n  // Функция для обновления хеша\n  const updateHash = (mode: TransactionModalMode, id?: string) => {\n    if (mode === 'create') {\n      window.location.hash = 'create';\n    } else if (mode === 'edit' && id) {\n      window.location.hash = `edit/${id}`;\n    }\n  };\n\n  // Функция для удаления хеша\n  const clearHash = () => {\n    if (window.location.hash) {\n      // Удаляем хеш без перезагрузки страницы\n      const url = window.location.pathname + window.location.search;\n      window.history.replaceState({}, document.title, url);\n    }\n  };\n\n  // Эффект для отслеживания изменений хеша при загрузке и navigation\n  useEffect(() => {\n    const handleHashChange = () => {\n      const hash = window.location.hash;\n      const parsedHash = parseHash(hash);\n\n      if (parsedHash) {\n        if (parsedHash.mode === 'create') {\n          setModalMode('create');\n          setEditingTransactionId(null);\n          setIsModalOpen(true);\n        } else if (parsedHash.mode === 'edit' && parsedHash.id) {\n          // Проверяем, существует ли транзакция с таким ID\n          const transaction = MockAPI.getTransactionById(parsedHash.id);\n          if (transaction) {\n            setModalMode('edit');\n            setEditingTransactionId(parsedHash.id);\n            setIsModalOpen(true);\n          } else {\n            // Если транзакция не найдена, показываем ошибку и удаляем хеш\n            message.error(t('transaction.modal.error.notFound'));\n            clearHash();\n          }\n        }\n      } else if (hash === '') {\n        // Если хеш удален, закрываем модальное окно\n        setIsModalOpen(false);\n        setEditingTransactionId(null);\n        setTimeout(() => {\n          setModalMode('create');\n        }, 300);\n      }\n    };\n\n    // Проверяем хеш при первой загрузке\n    handleHashChange();\n\n    // Слушаем изменения хеша\n    window.addEventListener('hashchange', handleHashChange);\n\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, [t]);\n\n  // Открытие модального окна для создания транзакции\n  const openCreateModal = () => {\n    setModalMode('create');\n    setEditingTransactionId(null);\n    setIsModalOpen(true);\n    updateHash('create');\n  };\n\n  // Открытие модального окна для редактирования транзакции\n  const openEditModal = (transactionId: string) => {\n    setModalMode('edit');\n    setEditingTransactionId(transactionId);\n    setIsModalOpen(true);\n    updateHash('edit', transactionId);\n  };\n\n  // Закрытие модального окна\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setEditingTransactionId(null);\n    clearHash();\n    // Небольшая задержка перед сбросом состояния для плавной анимации\n    setTimeout(() => {\n      setModalMode('create');\n    }, 300);\n  };\n\n  // Обработчик отправки формы\n  const handleSubmit = async (data: TransactionFormData): Promise<void> => {\n    setLoading(true);\n\n    try {\n      // Имитируем задержку API запроса\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      if (modalMode === 'create') {\n        // Создаем новую транзакцию через API\n        const createData: CreateTransactionData = {\n          type: data.type,\n          amount: data.amount,\n          title: data.title,\n          description: data.description,\n          categoryName: data.categoryName,\n          categoryIcon: data.categoryIcon,\n          categoryColor: data.categoryColor,\n          date: data.date,\n          tags: data.tags,\n        };\n\n        const newTransaction = MockAPI.createTransaction(createData);\n        console.log('Создана новая транзакция:', newTransaction);\n        message.success(t('transaction.modal.messages.createSuccess'));\n      } else if (modalMode === 'edit' && editingTransactionId) {\n        // Обновляем существующую транзакцию через API\n        const updateData: UpdateTransactionData = {\n          id: editingTransactionId,\n          type: data.type,\n          amount: data.amount,\n          title: data.title,\n          description: data.description,\n          categoryName: data.categoryName,\n          categoryIcon: data.categoryIcon,\n          categoryColor: data.categoryColor,\n          date: data.date,\n          tags: data.tags,\n        };\n\n        const updatedTransaction = MockAPI.updateTransaction(editingTransactionId, updateData);\n\n        if (updatedTransaction) {\n          console.log('Обновлена транзакция:', updatedTransaction);\n          message.success(t('transaction.modal.messages.updateSuccess'));\n        } else {\n          throw new Error('Транзакция не найдена');\n        }\n      }\n\n      closeModal();\n\n      // Принудительно обновляем страницу для отображения изменений\n      // В реальном приложении лучше использовать state management или callback\n      window.location.reload();\n    } catch (error) {\n      console.error('Ошибка при сохранении транзакции:', error);\n\n      const errorMessage =\n        modalMode === 'create'\n          ? t('transaction.modal.messages.createError')\n          : t('transaction.modal.messages.updateError');\n\n      message.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    isModalOpen,\n    modalMode,\n    loading,\n    editingTransactionId,\n    openCreateModal,\n    openEditModal,\n    closeModal,\n    handleSubmit,\n  };\n};\n","import { Modal } from 'antd';\nimport React, { useMemo } from 'react';\nimport { useAppTranslation } from 'src/app/providers/i18n';\nimport { MockAPI, Transaction } from 'src/shared/api/mock';\nimport { TransactionForm, TransactionFormData } from '../../form';\nimport { TransactionModalProps } from '../model/types';\n\nexport const TransactionModal: React.FC<TransactionModalProps> = ({\n  open,\n  onClose,\n  onSubmit,\n  mode,\n  transactionId,\n  loading = false,\n}) => {\n  const { t } = useAppTranslation();\n\n  // Получаем данные транзакции для редактирования\n  const transaction: Transaction | undefined = useMemo(() => {\n    if (mode === 'edit' && transactionId) {\n      return MockAPI.getTransactionById(transactionId);\n    }\n    return undefined;\n  }, [mode, transactionId]);\n\n  // Заголовок модального окна\n  const modalTitle = mode === 'create' ? t('transaction.modal.create.title') : t('transaction.modal.edit.title');\n\n  // Формируем defaultValues для формы при редактировании\n  const defaultValues = useMemo(() => {\n    if (mode === 'edit' && transaction) {\n      return {\n        type: transaction.type,\n        amount: transaction.amount,\n        title: transaction.title,\n        description: transaction.description,\n        categoryName: transaction.categoryName,\n        categoryIcon: transaction.categoryIcon,\n        categoryColor: transaction.categoryColor,\n        date: transaction.date.split('T')[0], // Преобразуем ISO дату в YYYY-MM-DD\n        tags: transaction.tags || [],\n      };\n    }\n    return {};\n  }, [mode, transaction]);\n\n  // Обработчик отправки формы\n  const handleFormSubmit = (data: TransactionFormData) => {\n    onSubmit(data);\n  };\n\n  // Если редактируем, но транзакция не найдена\n  if (mode === 'edit' && transactionId && !transaction) {\n    return (\n      <Modal title={t('transaction.modal.error.title')} open={open} onCancel={onClose} footer={null} centered>\n        <p>{t('transaction.modal.error.notFound')}</p>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      title={modalTitle}\n      open={open}\n      onCancel={onClose}\n      footer={null}\n      width={800}\n      centered\n      destroyOnHidden={true}\n      maskClosable={false}\n    >\n      <TransactionForm onSubmit={handleFormSubmit} defaultValues={defaultValues} loading={loading} />\n    </Modal>\n  );\n};\n","import { Transaction, TransactionType } from './types';\n\nexport const transactions: Transaction[] = [\n  // Транзакции за последние 3 месяца\n\n  // Доходы - Зарплата Александра\n  {\n    id: 'tx-1',\n    type: TransactionType.INCOME,\n    amount: 120000,\n    title: 'Зарплата март 2024',\n    description:\n      'Заработная плата за март от компании ООО \"Техностарт\", включает базовую ставку и премию за выполненные проекты',\n    categoryName: 'Зарплата',\n    categoryIcon: '💼',\n    categoryColor: '#4CAF50',\n    date: '2024-04-01T10:00:00.000Z',\n    tags: ['работа', 'ежемесячно'],\n    createdAt: '2024-04-01T10:00:00.000Z',\n    updatedAt: '2024-04-01T10:00:00.000Z',\n  },\n  {\n    id: 'tx-2',\n    type: TransactionType.INCOME,\n    amount: 120000,\n    title: 'Зарплата февраль 2024',\n    description: 'Ежемесячная заработная плата за февраль, перечислена на карту Сбербанка',\n    categoryName: 'Зарплата',\n    categoryIcon: '💼',\n    categoryColor: '#4CAF50',\n    date: '2024-03-01T10:00:00.000Z',\n    tags: ['работа', 'ежемесячно'],\n    createdAt: '2024-03-01T10:00:00.000Z',\n    updatedAt: '2024-03-01T10:00:00.000Z',\n  },\n\n  // Фриланс доходы\n  {\n    id: 'tx-3',\n    type: TransactionType.INCOME,\n    amount: 45000,\n    title: 'Веб-разработка',\n    description:\n      'Разработка лендинга для IT-стартапа, включает верстку, адаптив под мобильные устройства и интеграцию с CMS WordPress',\n    categoryName: 'Фриланс',\n    categoryIcon: '💻',\n    categoryColor: '#2E7D32',\n    date: '2024-03-15T14:30:00.000Z',\n    tags: ['фриланс', 'веб-разработка'],\n    createdAt: '2024-03-15T14:30:00.000Z',\n    updatedAt: '2024-03-15T14:30:00.000Z',\n  },\n\n  // Расходы на еду\n  {\n    id: 'tx-4',\n    type: TransactionType.EXPENSE,\n    amount: 2500,\n    title: 'Покупка продуктов',\n    description: 'Еженедельная закупка продуктов в супермаркете Пятерочка: молочные продукты, хлеб, овощи и фрукты',\n    categoryName: 'Продукты',\n    categoryIcon: '🛒',\n    categoryColor: '#E64A19',\n    date: '2024-04-10T18:20:00.000Z',\n    tags: ['продукты', 'еженедельно'],\n    createdAt: '2024-04-10T18:20:00.000Z',\n    updatedAt: '2024-04-10T18:20:00.000Z',\n  },\n  {\n    id: 'tx-5',\n    type: TransactionType.EXPENSE,\n    amount: 1800,\n    title: 'Обед в кафе',\n    description: 'Деловой обед с коллегами в кафе \"Бизнес Ланч\", обсуждение нового проекта',\n    categoryName: 'Рестораны и кафе',\n    categoryIcon: '🍽️',\n    categoryColor: '#D84315',\n    date: '2024-04-09T13:45:00.000Z',\n    tags: ['обед', 'коллеги'],\n    createdAt: '2024-04-09T13:45:00.000Z',\n    updatedAt: '2024-04-09T13:45:00.000Z',\n  },\n\n  // Транспортные расходы\n  {\n    id: 'tx-6',\n    type: TransactionType.EXPENSE,\n    amount: 3200,\n    title: 'Заправка автомобиля',\n    description: 'Полный бак бензина АИ-95 на заправке Лукойл, 50 литров по 64 рубля за литр',\n    categoryName: 'Бензин',\n    categoryIcon: '⛽',\n    categoryColor: '#1976D2',\n    date: '2024-04-08T08:15:00.000Z',\n    tags: ['бензин', 'автомобиль'],\n    createdAt: '2024-04-08T08:15:00.000Z',\n    updatedAt: '2024-04-08T08:15:00.000Z',\n  },\n\n  // Коммунальные платежи\n  {\n    id: 'tx-7',\n    type: TransactionType.EXPENSE,\n    amount: 8500,\n    title: 'Коммунальные услуги',\n    description:\n      'Ежемесячная оплата коммунальных услуг за март: электричество, водоснабжение, отопление и управляющая компания',\n    categoryName: 'Коммунальные услуги',\n    categoryIcon: '⚡',\n    categoryColor: '#5D4037',\n    date: '2024-04-05T09:30:00.000Z',\n    tags: ['коммунальные', 'ежемесячно'],\n    createdAt: '2024-04-05T09:30:00.000Z',\n    updatedAt: '2024-04-05T09:30:00.000Z',\n  },\n\n  // Развлечения\n  {\n    id: 'tx-8',\n    type: TransactionType.EXPENSE,\n    amount: 1200,\n    title: 'Билеты в кинотеатр',\n    description: 'Два билета в кинотеатр \"Синема Парк\" на премьеру нового блокбастера',\n    categoryName: 'Развлечения',\n    categoryIcon: '🎬',\n    categoryColor: '#9C27B0',\n    date: '2024-04-07T19:00:00.000Z',\n    tags: ['кино', 'развлечения'],\n    createdAt: '2024-04-07T19:00:00.000Z',\n    updatedAt: '2024-04-07T19:00:00.000Z',\n  },\n\n  // Перевод между счетами\n  {\n    id: 'tx-9',\n    type: TransactionType.TRANSFER,\n    amount: 30000,\n    title: 'Перевод на сбережения',\n    description: 'Ежемесячный перевод части доходов на сберегательный счет для накопления на отпуск',\n    categoryName: 'Прочие доходы',\n    categoryIcon: '💰',\n    categoryColor: '#66BB6A',\n    date: '2024-04-02T16:00:00.000Z',\n    tags: ['сбережения', 'перевод'],\n    createdAt: '2024-04-02T16:00:00.000Z',\n    updatedAt: '2024-04-02T16:00:00.000Z',\n  },\n\n  // Транзакции для Марии Ивановой\n  {\n    id: 'tx-10',\n    type: TransactionType.INCOME,\n    amount: 95000,\n    title: 'Зарплата март 2024',\n    description: 'Месячная заработная плата от компании \"Консалтинг Групп\", должность менеджер проектов',\n    categoryName: 'Зарплата',\n    categoryIcon: '💼',\n    categoryColor: '#4CAF50',\n    date: '2024-04-01T10:00:00.000Z',\n    tags: ['работа', 'зарплата'],\n    createdAt: '2024-04-01T10:00:00.000Z',\n    updatedAt: '2024-04-01T10:00:00.000Z',\n  },\n  {\n    id: 'tx-11',\n    type: TransactionType.EXPENSE,\n    amount: 3200,\n    title: 'Семейные продукты',\n    description: 'Большая закупка продуктов для семьи на неделю в гипермаркете \"Лента\"',\n    categoryName: 'Продукты',\n    categoryIcon: '🛒',\n    categoryColor: '#E64A19',\n    date: '2024-04-09T17:30:00.000Z',\n    tags: ['продукты', 'семья'],\n    createdAt: '2024-04-09T17:30:00.000Z',\n    updatedAt: '2024-04-09T17:30:00.000Z',\n  },\n  {\n    id: 'tx-12',\n    type: TransactionType.EXPENSE,\n    amount: 450,\n    title: 'Проезд на работу',\n    description: 'Пополнение карты \"Тройка\" для поездок на метро в течение недели',\n    categoryName: 'Общественный транспорт',\n    categoryIcon: '🚌',\n    categoryColor: '#1565C0',\n    date: '2024-04-09T08:45:00.000Z',\n    tags: ['транспорт', 'метро'],\n    createdAt: '2024-04-09T08:45:00.000Z',\n    updatedAt: '2024-04-09T08:45:00.000Z',\n  },\n\n  // Инвестиционные доходы\n  {\n    id: 'tx-13',\n    type: TransactionType.INCOME,\n    amount: 5200,\n    title: 'Дивиденды от акций',\n    description: 'Квартальные дивиденды от пакета акций Сбербанка и Газпрома в брокерском счете',\n    categoryName: 'Инвестиции',\n    categoryIcon: '📈',\n    categoryColor: '#1B5E20',\n    date: '2024-03-28T12:00:00.000Z',\n    tags: ['инвестиции', 'дивиденды'],\n    createdAt: '2024-03-28T12:00:00.000Z',\n    updatedAt: '2024-03-28T12:00:00.000Z',\n  },\n\n  // Медицинские расходы\n  {\n    id: 'tx-14',\n    type: TransactionType.EXPENSE,\n    amount: 2800,\n    title: 'Консультация врача',\n    description: 'Платная консультация терапевта и общие анализы в медицинском центре \"Инвитро\"',\n    categoryName: 'Здоровье и медицина',\n    categoryIcon: '💊',\n    categoryColor: '#E91E63',\n    date: '2024-04-03T15:20:00.000Z',\n    tags: ['здоровье', 'врач'],\n    createdAt: '2024-04-03T15:20:00.000Z',\n    updatedAt: '2024-04-03T15:20:00.000Z',\n  },\n\n  // Транзакции для Дмитрия Сидорова\n  {\n    id: 'tx-15',\n    type: TransactionType.INCOME,\n    amount: 78000,\n    title: 'Зарплата март 2024',\n    description: 'Заработная плата младшего разработчика в IT компании \"СофтТех\"',\n    categoryName: 'Зарплата',\n    categoryIcon: '💼',\n    categoryColor: '#4CAF50',\n    date: '2024-04-01T10:00:00.000Z',\n    tags: ['работа', 'зарплата'],\n    createdAt: '2024-04-01T10:00:00.000Z',\n    updatedAt: '2024-04-01T10:00:00.000Z',\n  },\n\n  // Покупки и шопинг\n  {\n    id: 'tx-16',\n    type: TransactionType.EXPENSE,\n    amount: 12000,\n    title: 'Покупка одежды',\n    description: 'Обновление гардероба в торговом центре \"Афимолл\": джинсы, рубашки и кроссовки',\n    categoryName: 'Покупки',\n    categoryIcon: '🛍️',\n    categoryColor: '#FF9800',\n    date: '2024-04-06T14:15:00.000Z',\n    tags: ['одежда', 'шопинг'],\n    createdAt: '2024-04-06T14:15:00.000Z',\n    updatedAt: '2024-04-06T14:15:00.000Z',\n  },\n\n  // Образование\n  {\n    id: 'tx-17',\n    type: TransactionType.EXPENSE,\n    amount: 15000,\n    title: 'Курс программирования',\n    description: 'Оплата месячной подписки на онлайн-курс \"Продвинутый React\" на платформе Skillbox',\n    categoryName: 'Образование',\n    categoryIcon: '📚',\n    categoryColor: '#607D8B',\n    date: '2024-03-25T11:30:00.000Z',\n    tags: ['образование', 'курсы', 'программирование'],\n    createdAt: '2024-03-25T11:30:00.000Z',\n    updatedAt: '2024-03-25T11:30:00.000Z',\n  },\n\n  // Криптовалютные операции\n  {\n    id: 'tx-18',\n    type: TransactionType.INCOME,\n    amount: 0.1,\n    title: 'Майнинг Bitcoin',\n    description: 'Доход от майнинга Bitcoin на собственной ферме, выплата за неделю работы',\n    categoryName: 'Инвестиции',\n    categoryIcon: '📈',\n    categoryColor: '#1B5E20',\n    date: '2024-04-04T02:15:00.000Z',\n    tags: ['криптовалюта', 'майнинг'],\n    createdAt: '2024-04-04T02:15:00.000Z',\n    updatedAt: '2024-04-04T02:15:00.000Z',\n  },\n\n  // Операции в евро\n  {\n    id: 'tx-19',\n    type: TransactionType.EXPENSE,\n    amount: 120,\n    title: 'Покупка книг',\n    description: 'Заказ технических книг по программированию в европейском интернет-магазине Amazon',\n    categoryName: 'Образование',\n    categoryIcon: '📚',\n    categoryColor: '#607D8B',\n    date: '2024-03-30T16:45:00.000Z',\n    tags: ['книги', 'образование', 'онлайн'],\n    createdAt: '2024-03-30T16:45:00.000Z',\n    updatedAt: '2024-03-30T16:45:00.000Z',\n  },\n\n  // Дополнительные разнообразные транзакции\n  {\n    id: 'tx-20',\n    type: TransactionType.INCOME,\n    amount: 25000,\n    title: 'Премия за проект',\n    description: 'Квартальная премия за успешное завершение проекта по разработке мобильного приложения',\n    categoryName: 'Бонусы и премии',\n    categoryIcon: '🎁',\n    categoryColor: '#388E3C',\n    date: '2024-03-20T17:00:00.000Z',\n    tags: ['премия', 'проект'],\n    createdAt: '2024-03-20T17:00:00.000Z',\n    updatedAt: '2024-03-20T17:00:00.000Z',\n  },\n  {\n    id: 'tx-21',\n    type: TransactionType.EXPENSE,\n    amount: 35000,\n    title: 'Аренда квартиры',\n    description: 'Ежемесячная арендная плата за однокомнатную квартиру в районе метро Сокольники',\n    categoryName: 'Аренда',\n    categoryIcon: '🔑',\n    categoryColor: '#6D4C41',\n    date: '2024-03-01T09:00:00.000Z',\n    tags: ['аренда', 'жилье', 'ежемесячно'],\n    createdAt: '2024-03-01T09:00:00.000Z',\n    updatedAt: '2024-03-01T09:00:00.000Z',\n  },\n  {\n    id: 'tx-22',\n    type: TransactionType.EXPENSE,\n    amount: 850,\n    title: 'Абонемент в спортзал',\n    description: 'Месячная подписка в фитнес-клуб \"Планета Фитнес\", включает тренажерный зал и групповые занятия',\n    categoryName: 'Прочие расходы',\n    categoryIcon: '💸',\n    categoryColor: '#9E9E9E',\n    date: '2024-04-01T08:00:00.000Z',\n    tags: ['спорт', 'здоровье', 'подписка'],\n    createdAt: '2024-04-01T08:00:00.000Z',\n    updatedAt: '2024-04-01T08:00:00.000Z',\n  },\n];\n","import { transactions } from './transactions';\nimport { Transaction, TransactionType } from './types';\n\n// Локальный массив транзакций для имитации базы данных\nlet transactionsData = [...transactions];\n\n// Данные для создания новой транзакции\nexport interface CreateTransactionData {\n  type: TransactionType;\n  amount: number;\n  title: string;\n  description: string;\n  categoryName: string;\n  categoryIcon: string;\n  categoryColor: string;\n  date: string;\n  tags?: string[];\n}\n\n// Данные для обновления транзакции\nexport interface UpdateTransactionData extends Partial<CreateTransactionData> {\n  id: string;\n}\n\n// Утилитные функции для работы с транзакциями\nexport class MockAPI {\n  // Получение всех транзакций\n  static getAllTransactions(): Transaction[] {\n    return [...transactionsData];\n  }\n\n  // Получение транзакции по ID\n  static getTransactionById(id: string): Transaction | undefined {\n    return transactionsData.find((transaction) => transaction.id === id);\n  }\n\n  // Создание новой транзакции\n  static createTransaction(data: CreateTransactionData): Transaction {\n    const now = new Date().toISOString();\n\n    const newTransaction: Transaction = {\n      id: `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: data.type,\n      amount: data.amount,\n      title: data.title,\n      description: data.description,\n      categoryName: data.categoryName,\n      categoryIcon: data.categoryIcon,\n      categoryColor: data.categoryColor,\n      date: data.date + 'T12:00:00.000Z', // Добавляем время\n      tags: data.tags || [],\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    // Добавляем в начало массива (новые транзакции сверху)\n    transactionsData.unshift(newTransaction);\n\n    return newTransaction;\n  }\n\n  // Обновление транзакции\n  static updateTransaction(id: string, data: UpdateTransactionData): Transaction | null {\n    const index = transactionsData.findIndex((transaction) => transaction.id === id);\n\n    if (index === -1) {\n      return null;\n    }\n\n    const existingTransaction = transactionsData[index];\n    const updatedTransaction: Transaction = {\n      ...existingTransaction,\n      ...data,\n      date: data.date ? data.date + 'T12:00:00.000Z' : existingTransaction.date,\n      updatedAt: new Date().toISOString(),\n    };\n\n    transactionsData[index] = updatedTransaction;\n\n    return updatedTransaction;\n  }\n\n  // Удаление транзакции\n  static deleteTransaction(id: string): boolean {\n    const index = transactionsData.findIndex((transaction) => transaction.id === id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    transactionsData.splice(index, 1);\n    return true;\n  }\n\n  // Фильтрация транзакций\n  static getTransactionsByType(type: 'income' | 'expense' | 'transfer'): Transaction[] {\n    return transactionsData.filter((transaction) => transaction.type === type);\n  }\n\n  static getTransactionsByCategory(categoryName: string): Transaction[] {\n    return transactionsData.filter((transaction) => transaction.categoryName === categoryName);\n  }\n\n  static getTransactionsByDateRange(startDate: string, endDate: string): Transaction[] {\n    return transactionsData.filter((transaction) => {\n      const transactionDate = new Date(transaction.date);\n      return transactionDate >= new Date(startDate) && transactionDate <= new Date(endDate);\n    });\n  }\n\n  // Сброс данных к первоначальному состоянию (для тестирования)\n  static resetData(): void {\n    transactionsData = [...transactions];\n  }\n}\n\n// Экспорт всех типов и данных\nexport { transactions } from './transactions';\nexport * from './types';\n","export enum TransactionType {\n  INCOME = 'income',\n  EXPENSE = 'expense',\n  TRANSFER = 'transfer',\n}\n\n// Типы для моковой базы данных транзакций\nexport interface Transaction {\n  id: string;\n  type: TransactionType;\n  amount: number;\n  title: string;\n  description: string;\n  categoryName: string;\n  categoryIcon: string;\n  categoryColor: string;\n  date: string;\n  tags?: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Типы для компонентов отображения операций\nexport interface TransactionBrief {\n  id: string;\n  amount: number;\n  title: string;\n  categoryName: string;\n  categoryIcon: string;\n  categoryColor: string;\n  description: string;\n  descriptionShort: string;\n  type: TransactionType;\n}\n\nexport interface TransactionFull {\n  id: string;\n  amount: number;\n  title: string;\n  categoryName: string;\n  categoryIcon: string;\n  categoryColor: string;\n  description: string;\n  date: string;\n  type: TransactionType;\n  tags?: string[];\n}\n"],"names":["CreateTransactionButton","_ref","onClick","_ref$size","size","_ref$type","type","t","useAppTranslation","React","Button","icon","PlusOutlined","_regeneratorRuntime","e","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","DeleteTransactionButton","transactionId","_ref$block","block","onSuccess","navigate","useNavigate","handleDelete","fn","_ref2","_callee","_context","console","log","message","success","self","args","arguments","apply","err","undefined","Popconfirm","title","description","okButtonProps","danger","okText","cancelText","onConfirm","EditTransactionButton","EditOutlined","INCOME_CATEGORIES","color","EXPENSE_CATEGORIES","TRANSFER_CATEGORIES","TextArea","Input","Text","Typography","TransactionForm","_errors$type","_errors$amount","_errors$title","_errors$categoryName","_errors$date","_errors$description","_errors$tags","onSubmit","_ref$defaultValues","defaultValues","_ref$loading","loading","_useState2","_slicedToArray","useState","TransactionType","EXPENSE","selectedType","setSelectedType","_useState4","selectedCategory","setSelectedCategory","_useState6","tagInput","setTagInput","validationRules","required","amount","min","max","minLength","maxLength","categoryName","categoryIcon","categoryColor","date","validate","selectedDate","Date","today","setHours","tags","_step","_iterator","_createForOfIteratorHelper","createTransactionValidationRules","useEffect","_useForm","useForm","_objectSpread","toISOString","split","mode","control","handleSubmit","_useForm$formState","formState","errors","isSubmitting","watch","setValue","watchedType","watchedTags","categories","INCOME","TRANSFER","getCategories","handleAddTag","trim","includes","newTags","concat","Card","style","width","Form","layout","onFinish","data","Item","label","validateStatus","help","Controller","rules","render","field","Radio","_extends","Row","gutter","Col","xs","md","_ref3","InputNumber","placeholder","prefix","DollarOutlined","step","precision","formatter","replace","parser","_ref4","FileTextOutlined","marginBottom","Space","map","category","Tag","CheckableTag","checked","locale","onChange","handleCategorySelect","_ref5","DatePicker","dayjs","format","CalendarOutlined","disabledDate","current","endOf","_ref6","rows","showCount","Compact","target","onPressEnter","TagOutlined","tag","closable","onClose","tagToRemove","filter","fontSize","padding","Flex","justify","gap","disabled","htmlType","arr","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","minLen","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","len","arr2","useTransactionModal","isModalOpen","setIsModalOpen","modalMode","setModalMode","setLoading","_useState8","editingTransactionId","setEditingTransactionId","updateHash","id","window","location","hash","clearHash","url","pathname","search","history","replaceState","document","handleHashChange","parsedHash","editMatch","match","parseHash","MockAPI","getTransactionById","setTimeout","addEventListener","removeEventListener","closeModal","createData","newTransaction","updateData","updatedTransaction","errorMessage","createTransaction","updateTransaction","reload","t0","_x","openCreateModal","openEditModal","TransactionModal","open","transaction","useMemo","modalTitle","Modal","onCancel","footer","centered","destroyOnHidden","maskClosable","transactions","createdAt","updatedAt","transactionsData","_toConsumableArray","_classCallCheck","find","now","Math","random","substr","unshift","index","findIndex","existingTransaction","splice","startDate","endDate","transactionDate"],"sourceRoot":""}